# -*- coding: utf-8 -*-

"""

/***************************************************************************

 SIOBuilderDialog

                                 A QGIS plugin

 SIOBuilder

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/

                             -------------------

        begin                : 2022-06-14

        git sha              : $Format:%H$

        copyright            : (C) 2022 by SIOBuilder

        email                : SIOBuilder

 ***************************************************************************/



/***************************************************************************

 *                                                                         *

 *   This program is free software; you can redistribute it and/or modify  *

 *   it under the terms of the GNU General Public License as published by  *

 *   the Free Software Foundation; either version 2 of the License, or     *

 *   (at your option) any later version.                                   *

 *                                                                         *

 ***************************************************************************/

"""



import os

import processing

import sys

import time

import pickle

import csv

import numpy as np

import unicodedata

from operator import itemgetter

from PyQt5.QtCore import Qt

from qgis.PyQt import *

from qgis.core import *

from qgis.utils import iface

from PyQt5.QtWidgets import *

from PyQt5 import QtCore

from PyQt5.QtGui import * 

from PyQt5.QtCore import QVariant

from qgis.gui import QgsMapCanvas, QgsLayerTreeMapCanvasBridge

from qgis.PyQt.QtWidgets import QMessageBox

from math import *

from qgis.gui import QgsMapToolEmitPoint

from PyQt5 import QtCore

from PyQt5.QtCore import *

from PyQt5.QtWebKit import *

from PyQt5.QtWebKitWidgets import *

from qgis.PyQt import uic

from qgis.PyQt import QtWidgets

import itertools

from copy import deepcopy

import pandas as pd





# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer

FORM_CLASS, _ = uic.loadUiType(os.path.join(

    os.path.dirname(__file__), 'SIOBuilder_dialog_base.ui'))

point1=0

point2=0

origine= None

extremite = None

DBLnonRaccorde = ''

CableImpossible = ''

adductionSansInfra = ''

creationcableactive = 0

proprietaire = ''

gestionnaire = ''

type_fonc_cable = ''

pluginpath = ''

FuSettings = ''

incrementationBT = ''

incrementationPTFile = ''

configPTFile = ''

streetviewint = 0



web = QWebView()

def display_point( pointTool ): 

    geom = QgsGeometry.fromPointXY (pointTool)

    # Prepare crs source and destination and instanciate a transform function

    sourceCrs = QgsCoordinateReferenceSystem(2154)

    destCrs = QgsCoordinateReferenceSystem(4326)

    tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())

    geom2 = QgsGeometry(geom)

    geom2.transform(tr)

    coord = geom2.asPoint()

    web.setWindowTitle("StreetView Libre")

    web.show()

    web.load(QUrl('https://www.google.com/maps/@?api=1&map_action=pano&viewpoint='+str(coord.y())+','+str(coord.x())+'&heading=0&pitch=10&fov=250'))



def stopTool():

    pointTool.canvasClicked.disconnect( display_point )

    

def useTool():

    pointTool.canvasClicked.connect( display_point )

    canvas.setMapTool( pointTool )

canvas = iface.mapCanvas()

pointTool = QgsMapToolEmitPoint(canvas)





def createCable():

    controlboite = 0

    controlcable = 0

    controlinfra = 0

    global CableImpossible

    for layer in QgsProject.instance().mapLayers().values():

        if 'BOITE_OPTIQUE' in layer.name():

            boitelyr = layer

            controlboite+=1

        if 'CABLE_OPTIQUE' in layer.name():

            cablelyr = layer

            controlcable +=1

        if 'INFRA' in layer.name():

            infralyr = layer

            controlinfra +=1

    

    if controlcable == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche CABLE_OPTIQUE n\'est pas présente')

    

    if controlinfra == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche INFRA n\'est pas présente')

    

    if not controlboite ==0 and not controlcable==0 and not controlinfra==0:

        global point1

        global point2

        global origine

        global extremite

        global proprietaire

        global gestionnaire

        global type_fonc_cable

        if boitelyr.selectedFeatures():

            selectedboite = boitelyr.selectedFeatures()[0]

            if boitelyr.selectedFeatureCount()==1:

                if point1==0:

                    point1 = selectedboite.geometry()

                    origine = selectedboite["NOM"]

                elif not point1 == 0 and not point2 == 0:

                    point1 = selectedboite.geometry()

                    point2 = 0

                    origine = selectedboite["NOM"]

                else:

                    point2 = selectedboite.geometry()

                    extremite = selectedboite["NOM"]

                    try:

                        parameters = {

                            'END_POINT' : point2,

                            'INPUT' : infralyr,

                            'OUTPUT' : 'TEMPORARY_OUTPUT',

                            'START_POINT' : point1,

                            'STRATEGY' : 0,

                            'TOLERANCE' : 0,

                        }

                        result = processing.run("qgis:shortestpathpointtopoint", parameters)['OUTPUT']

                        result.setName(f'CREATION_CABLE') # changing the output name

                        QgsProject.instance().addMapLayer(result) # adding output to the map

                        for layer in QgsProject.instance().mapLayers().values():

                            if f'CREATION_CABLE' in layer.name():

                                result = layer

                        result.selectAll()

                        iface.copySelectionToClipboard(result)

                        cablelyr.startEditing()

                        iface.pasteFromClipboard(cablelyr)

                        QgsProject.instance().removeMapLayers([result.id()])

                        for feature in cablelyr.selectedFeatures():

                            cableID = feature.id()

                            lgr = feature.geometry().length()

                        if type_fonc_cable == "DISTRIBUTION":

                            dis_tra = 'CDI'

                        else:

                            dis_tra = 'CTR'

                        nom = dis_tra+ extremite[3:19]

                        zac = extremite[16:17]+'000'

                        originefield = cablelyr.fields().indexOf('ORIGINE')

                        cablelyr.changeAttributeValue(cableID, originefield, origine)

                        extremitefield = cablelyr.fields().indexOf('EXTREMITE')

                        cablelyr.changeAttributeValue(cableID, extremitefield, extremite)

                        nomfield = cablelyr.fields().indexOf('NOM')

                        cablelyr.changeAttributeValue(cableID, nomfield, nom)

                        codefield = cablelyr.fields().indexOf('CODE')

                        cablelyr.changeAttributeValue(cableID, codefield, nom)

                        if type_fonc_cable == "DISTRIBUTION":

                            sectionfield = cablelyr.fields().indexOf('SECTION')

                            cablelyr.changeAttributeValue(cableID, sectionfield, zac)

                        type_fonc = cablelyr.fields().indexOf('TYPE_FONC')

                        cablelyr.changeAttributeValue(cableID, type_fonc, type_fonc_cable)

                        proprietairefield = cablelyr.fields().indexOf('PROPRIETAI')

                        cablelyr.changeAttributeValue(cableID, proprietairefield, proprietaire)

                        gestionnairefield = cablelyr.fields().indexOf('GESTIONNAI')

                        cablelyr.changeAttributeValue(cableID, gestionnairefield, gestionnaire)

                        etatfield = cablelyr.fields().indexOf('ETAT')

                        cablelyr.changeAttributeValue(cableID, etatfield, 'PROJET')

                        lgrfield = cablelyr.fields().indexOf('LGR_CARTO')

                        cablelyr.changeAttributeValue(cableID, lgrfield, lgr)

                        typefibrefield = cablelyr.fields().indexOf('TYPEFIBRE')

                        cablelyr.changeAttributeValue(cableID, typefibrefield, 'G657A2')

                        if 'SRO' in origine:

                            commentfield = cablelyr.fields().indexOf('COMMENT')

                            cablelyr.changeAttributeValue(cableID, commentfield, 'CABLE DE DISTRIBUTION 1')

                        rattach = 'PMU'+extremite[3:14]

                        rattachfield = cablelyr.fields().indexOf('RATTACH')

                        cablelyr.changeAttributeValue(cableID, rattachfield, rattach)

                        isolefield = cablelyr.fields().indexOf('ISOLE')

                        cablelyr.changeAttributeValue(cableID, isolefield, 0)

                        emprisefield = cablelyr.fields().indexOf('EMPRISE')

                        cablelyr.changeAttributeValue(cableID, emprisefield, 'CONSTRUCTION')

                    except:

                        QMessageBox.warning(None, "Aucun itinéraire", 'Vérifiez l\'accrochage des infras')

                        if CableImpossible == '':

                            CableImpossible = "Impossible de créer les câbles entre les boites :\r"

                        CableImpossible = CableImpossible + '     - ' + origine + ' et ' + extremite + '\r'

                iface.layerTreeView().setCurrentLayer(boitelyr)

                cablelyr.commitChanges()



def createAdduction():

    controlboite = 0

    controldbl = 0

    controlinfra = 0

    controladduction = 0

    controlzapbo = 0

    controlchambre = 0 

    controlsupportpiq =0

    errorchecker = 0

    global DBLnonRaccorde

    global adductionSansInfra

    for layer in QgsProject.instance().mapLayers().values():

        if 'BOITE_OPTIQUE' in layer.name():

            boitelyr = layer

            controlboite +=1

            boitelyr.removeSelection()

        if 'DBL' in layer.name():

            dbllyr = layer

            controldbl +=1

            dbllyr.removeSelection()

        if 'INFRA' in layer.name():

            infralyr = layer

            controlinfra +=1

        if 'ADDUCTION' in layer.name():

            adductionlyr = layer

            controladduction+=1

            adductionlyr.removeSelection()

        if 'ZAPBO' in layer.name():

            zapbolyr = layer

            controlzapbo+=1

        if 'CHAMBRE' in layer.name():

            chambrelyr = layer

            controlchambre+=1

        if 'SUPPORT' in layer.name():

            lyrType = layer.geometryType()

            if lyrType == QgsWkbTypes.PointGeometry:

                supportpiq = layer

                controlsupportpiq+=1

    if controlboite == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche BOITE_OPTIQUE n\'est pas présente')

            

    if controldbl == 0 :

        QMessageBox.critical(None, "Couche manquante", 'La couche DBL n\'est pas présente')

            

    if controlinfra == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche INFRA n\'est pas présente')

            

    if controladduction == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche ADDUCTION n\'est pas présente')

            

    if controlzapbo == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche ZAPBO n\'est pas présente')

    

    if controlchambre == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche CHAMBRE n\'est pas présente')

        

    if controlsupportpiq == 0:

        QMessageBox.critical(None, "Couche manquante", 'La couche SUPPORT (piquetage) n\'est pas présente')

    

    testnomzapbo = 0

    for featurezapbo in zapbolyr.getFeatures() : 

        if featurezapbo["NOM"] == NULL:

            testnomzapbo +=1

            

    testnomboite = 0

    for featureboite in boitelyr.getFeatures() : 

        if featureboite["NOM"] == NULL:

            testnomboite +=1

    

    if testnomzapbo == 0:

        if testnomboite ==0:

            if not controlboite == 0 and not controldbl ==0 and not controlinfra ==0 and not controladduction == 0 and not controlzapbo==0 and not controlchambre ==0 and not controlsupportpiq ==0:

                field_name = "ID"

                field_index = zapbolyr.fields().indexFromName(field_name)

                if field_index == -1:

                    layer_provider=zapbolyr.dataProvider()

                    layer_provider.addAttributes([QgsField("ID",QVariant.Int)])

                    zapbolyr.updateFields()

                else:

                    for featurezapbo in zapbolyr.getFeatures():

                        ID = zapbolyr.fields().indexOf('ID')

                        zapbolyr.changeAttributeValue(featurezapbo.id(), ID, '')

                field_index = boitelyr.fields().indexFromName(field_name)

                if field_index == -1:

                    layer_provider=boitelyr.dataProvider()

                    layer_provider.addAttributes([QgsField("ID",QVariant.Int)])

                    boitelyr.updateFields()

                else:

                    for featureboite in boitelyr.getFeatures():

                        ID = boitelyr.fields().indexOf('ID')

                        boitelyr.changeAttributeValue(featureboite.id(), ID, '')

                i=0

                zapbolyr.startEditing()

                for featurezapbo in zapbolyr.getFeatures():

                    i+=1

                    ID = zapbolyr.fields().indexOf('ID')

                    zapbolyr.changeAttributeValue(featurezapbo.id(), ID, i)

                zapbolyr.commitChanges()



                    # Set properties for the join

                field = 'NOM'

                joinObject = QgsVectorLayerJoinInfo()

                joinObject.setJoinFieldName(field)

                joinObject.setTargetFieldName(field)

                joinObject.setJoinLayerId(zapbolyr.id())

                joinObject.setUsingMemoryCache(True)

                joinObject.setJoinLayer(zapbolyr)

                boitelyr.addJoin(joinObject)



                ip1 = boitelyr.fields().indexFromName('ID')

                joinfield = str(zapbolyr)[18:-8]+'_ID'

                ip1_join = boitelyr.fields().indexFromName(joinfield)



                boitelyr.startEditing()

                for feat in boitelyr.getFeatures():

                    boitelyr.changeAttributeValue(feat.id(), ip1, feat.attributes()[ip1_join])



                boitelyr.removeJoin(zapbolyr.id())

                boitelyr.commitChanges()



                dbllyr.startEditing()
  

                parameters = { 'DISCARD_NONMATCHING' : False,

                    'INPUT' : dbllyr,

                    'JOIN' : zapbolyr,

                    'JOIN_FIELDS' : ['ID'],

                    'METHOD' : 0,

                    'OUTPUT' : 'TEMPORARY_OUTPUT',

                    'PREDICATE' : [0],

                    'PREFIX' : '' }

                result = processing.run("qgis:joinattributesbylocation", parameters)['OUTPUT']

                result.setName(f'JOINTURE_DBL') # changing the output name

                QgsProject.instance().addMapLayer(result) # adding output to the map



                for layer in QgsProject.instance().mapLayers().values():

                    if 'JOINTURE_DBL' in layer.name():

                        jointurelyr = layer



                field_index = dbllyr.fields().indexFromName(field_name)

                if field_index == -1:

                    layer_provider=dbllyr.dataProvider()

                    layer_provider.addAttributes([QgsField("ID",QVariant.Int)])

                    dbllyr.updateFields()

                else:

                    for featuredbl in dbllyr.getFeatures():

                        ID = dbllyr.fields().indexOf('ID')

                        dbllyr.changeAttributeValue(featuredbl.id(), ID, '')



                if dbllyr.featureCount()== jointurelyr.featureCount():

                    jointurelyr.selectAll()

                    iface.copySelectionToClipboard(jointurelyr)

                    dbllyr.startEditing()

                    for feat in dbllyr.getFeatures():

                        dbllyr.deleteFeature(feat.id())

                    iface.pasteFromClipboard(dbllyr)

                    QgsProject.instance().removeMapLayers([jointurelyr.id()])

                    dbllyr.commitChanges()

                

                    nbboite = boitelyr.featureCount()

                    tableauboite = []

                    i=1

                    while i<=nbboite:

                        tableauboite.append(i)

                        i+=1

                    boitelyr.startEditing()

                    for featureboite in boitelyr.getFeatures():

                        if featureboite["NOM"][0:3] == 'PBO' or featureboite["NOM"][0:3] == 'PIA':

                            coordboite = featureboite.geometry()

                            boiteNOM = featureboite["NOM"]

                            boiteID = featureboite["ID"]

                            test = str(boiteID)

                            if test=='NULL':

                                testint=0

                            else:

                                testint=int(test)

                            tableauboite[testint]=[boiteID,boiteNOM,coordboite]

                        else:

                            ID = boitelyr.fields().indexOf('ID')

                            boitelyr.changeAttributeValue(featureboite.id(), ID, 999999999)

                    i=0

                    for featureinfra in infralyr.getFeatures():

                        for featuredbl in dbllyr.getFeatures():

                            if featuredbl.geometry().intersects(featureinfra.geometry()):

                                dblID = featuredbl["ID"]

                                test = str(dblID)

                                if not test or test == 'NULL':

                                    testint=0

                                else:

                                    testint=int(test)

                                try:

                                    boiteID=tableauboite[testint][0]

                                    featureboite=tableauboite[testint][1]

                                    coordboite= tableauboite[testint][2]

                                    nbprise = featuredbl["NB_PRISE"]

                                    coorddbl = featuredbl.geometry()

                                    i+=1

                                    try:

                                        if nbprise > 0 and nbprise < 4 and dblID==boiteID:

                                            parameters = {

                                                'END_POINT' : coordboite,

                                                'INPUT' : infralyr,

                                                'OUTPUT' : 'TEMPORARY_OUTPUT',

                                                'START_POINT' : coorddbl,

                                                'STRATEGY' : 0,

                                                'TOLERANCE' : 0.05,

                                                }

                                            result = processing.run("qgis:shortestpathpointtopoint", parameters)['OUTPUT']

                                            result.setName(f'Chemin le plus court {i}') # changing the output name

                                            QgsProject.instance().addMapLayer(result) # adding output to the map

                                            for layer in QgsProject.instance().mapLayers().values():

                                                if f'Chemin le plus court {i}' in layer.name():

                                                    result = layer

                                            result.selectAll()

                                            iface.copySelectionToClipboard(result)

                                            adductionlyr.startEditing()

                                            iface.pasteFromClipboard(adductionlyr)

                                            QgsProject.instance().removeMapLayers([result.id()])

                                    except QgsProcessingException:

                                        pass

                                    except: # for other errors

                                        pass

                                except:

                                    pass

                else :

                    QMessageBox.critical(None, "Jointure impossible", 'Des DBL sont dans plusieurs ZAPBO : voir les logs')

                    errorchecker = 1

                    parameters = { '-b' : False,

                        '-c' : False,

                        'GRASS_MIN_AREA_PARAMETER' : 0.0001,

                        'GRASS_OUTPUT_TYPE_PARAMETER' : 0,

                        'GRASS_REGION_PARAMETER' : None,

                        'GRASS_SNAP_TOLERANCE_PARAMETER' : -1,

                        'GRASS_VECTOR_DSCO' : '',

                        'GRASS_VECTOR_EXPORT_NOCAT' : False,

                        'GRASS_VECTOR_LCO' : '',

                        'error' : 'TEMPORARY_OUTPUT',

                        'input' : jointurelyr,

                        'output' : 'TEMPORARY_OUTPUT',

                        'threshold' : '',

                        'tool' : [6],

                        'type' : [0] }

                    result = processing.run('grass7:v.clean', parameters)

                    result = result['error']

                    vlayer = QgsVectorLayer(result, "errordbl", "ogr")

                    QgsProject.instance().addMapLayer(vlayer)

                    for layer in QgsProject.instance().mapLayers().values():

                        if 'errordbl' in layer.name():

                            errordbl = layer

                    parameters = { 'INPUT' : dbllyr,

                        'INTERSECT' : errordbl,

                        'METHOD' : 0, 

                        'PREDICATE' : [3] }

                    processing.run('qgis:selectbylocation', parameters)

                    if dbllyr.selectedFeatureCount() > 0:

                        DBLnonRaccorde = 'Les références suivantes sont dans plusieurs ZAPBO :\r'

                        for selecteddbl in dbllyr.selectedFeatures():

                            DBLnonRaccorde = DBLnonRaccorde + '     - '+selecteddbl["REF_IMB"]+'\r'

                    QgsProject.instance().removeMapLayers([jointurelyr.id()])

                    QgsProject.instance().removeMapLayers([errordbl.id()])

                    

                if errorchecker == 0:

                    parameters = { 'INPUT' : dbllyr,

                        'INTERSECT' : adductionlyr,

                        'METHOD' : 0, 

                        'PREDICATE' : [2] }

                    processing.run('qgis:selectbylocation', parameters)

                    parameters = { 'EXPRESSION' : '"NB_PRISE">0 AND "NB_PRISE"<4',

                        'INPUT' : dbllyr,

                        'METHOD' : 3 }

                    processing.run('qgis:selectbyexpression', parameters)

                    parameters = { 'ANTIMERIDIAN_SPLIT' : False,

                        'GEODESIC' : False,

                        'GEODESIC_DISTANCE' : 1000,

                        'HUBS' : QgsProcessingFeatureSourceDefinition(dbllyr.dataProvider().dataSourceUri(), selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),

                        'HUB_FIELD' : 'ID',

                        'HUB_FIELDS' : [],

                        'OUTPUT' : 'TEMPORARY_OUTPUT',

                        'SPOKES' : boitelyr,

                        'SPOKE_FIELD' : 'ID',

                        'SPOKE_FIELDS' : [] }

                    result = processing.run('native:hublines', parameters)['OUTPUT']

                    result.setName(f'Creation ligne') # changing the output name

                    QgsProject.instance().addMapLayer(result) # adding output to the map

                    for layer in QgsProject.instance().mapLayers().values():

                        if f'Creation ligne' in layer.name():

                            result = layer

                    commentfield = result.fields().indexOf('COMMENT')

                    result.startEditing()

                    for lignesdroites in result.getFeatures():

                        result.changeAttributeValue(lignesdroites.id(), commentfield, 'PAS D\'INFRA')

                    result.commitChanges()

                    result.selectAll()

                    iface.copySelectionToClipboard(result)

                    adductionlyr.startEditing()

                    iface.pasteFromClipboard(adductionlyr)

                    QgsProject.instance().removeMapLayers([result.id()])

                    

                

                zapbolyr.commitChanges()

                boitelyr.commitChanges()

                dbllyr.commitChanges()

                with edit(zapbolyr):

                    IDfield = zapbolyr.fields().indexFromName('ID')

                    zapbolyr.dataProvider().deleteAttributes([IDfield])

                zapbolyr.updateFields()

                with edit(boitelyr):

                    IDfield = boitelyr.fields().indexFromName('ID')

                    boitelyr.dataProvider().deleteAttributes([IDfield])

                boitelyr.updateFields()

                with edit(dbllyr):

                    IDfield = dbllyr.fields().indexFromName('ID')

                    dbllyr.dataProvider().deleteAttributes([IDfield])

                dbllyr.updateFields()

                

                parameters = { 'INPUT' : dbllyr,

                    'INTERSECT' : adductionlyr,

                    'METHOD' : 0, 

                    'PREDICATE' : [2] }

                processing.run('qgis:selectbylocation', parameters)

                parameters = { 'EXPRESSION' : '"NB_PRISE">0 AND "NB_PRISE"<4',

                    'INPUT' : dbllyr,

                    'METHOD' : 3 }

                processing.run('qgis:selectbyexpression', parameters)

                if dbllyr.selectedFeatureCount() > 0:

                    if DBLnonRaccorde == '':

                        DBLnonRaccorde = 'Les références suivantes n\'ont pas de boite :\r'

                        for selecteddbl in dbllyr.selectedFeatures():

                            DBLnonRaccorde = DBLnonRaccorde + '     - '+selecteddbl["REF_IMB"]+'\r'

                

                for featurechambre in chambrelyr.getFeatures():

                    for featureadduction in adductionlyr.getFeatures():

                        if featureadduction.geometry().intersects(featurechambre.geometry()):

                            TYPE_STRUC = adductionlyr.fields().indexOf('TYPE_STRUC')

                            adductionlyr.changeAttributeValue(featureadduction.id(), TYPE_STRUC, 'CONDUITE')

                            

                for featuresupportpiq in supportpiq.getFeatures():

                    for featureadduction in adductionlyr.getFeatures():

                        if featureadduction.geometry().intersects(featuresupportpiq.geometry()):

                            TYPE_STRUC = adductionlyr.fields().indexOf('TYPE_STRUC')

                            adductionlyr.changeAttributeValue(featureadduction.id(), TYPE_STRUC, 'AERIEN')

                

                i=0

                for featureadduction in adductionlyr.getFeatures():

                    i+=1

                    LG = adductionlyr.fields().indexOf('LG')

                    ID = adductionlyr.fields().indexOf('ID')

                    ETAT = adductionlyr.fields().indexOf('ETAT')

                    COMMENT = adductionlyr.fields().indexOf('COMMENT')

                    longueur = featureadduction.geometry().length()

                    adductionlyr.changeAttributeValue(featureadduction.id(), LG, longueur)

                    adductionlyr.changeAttributeValue(featureadduction.id(), ID, i)

                    adductionlyr.changeAttributeValue(featureadduction.id(), ETAT, 'PROJET')

                    if longueur > 99 : 

                        adductionlyr.changeAttributeValue(featureadduction.id(), COMMENT, 'RACC LONG')

                adductionlyr.commitChanges()

                

                if adductionlyr.selectedFeatureCount() > 0:

                    adductionSansInfra = 'Aucune infra pour les adductions suivantes :\r'

                    for featureadduction in adductionlyr.selectedFeatures():

                        adductionSansInfra = adductionSansInfra + '     - '+str(featureadduction["ID"])+'\r'

                

                adductionlyr.removeSelection()

                dbllyr.removeSelection()

        else:

            QMessageBox.critical(None, "Erreur de remplissage", 'Toutes les BOITE_OPTIQUE ne sont pas nommées')

    else :

        QMessageBox.critical(None, "Erreur de remplissage", 'Toutes les ZAPBO ne sont pas nommées')

        



    

    

class SIOBuilderDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=iface.mainWindow()):

        """Constructor."""

        super(SIOBuilderDialog, self).__init__(parent)

        # Set up the user interface from Designer through FORM_CLASS.

        # After self.setupUi() you can access any designer object by doing

        # self.<objectname>, and you can use autoconnect slots - see

        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html

        # #widgets-and-dialogs-with-auto-connect

        self.setupUi(self)

        self.precedent.setDisabled(True)

        def suivantfunc():

            self.stackedWidget.setCurrentIndex(self.stackedWidget.currentIndex() + 1)

            if self.stackedWidget.currentIndex() == 11:

                self.suivant.setDisabled(True)

            else:

                self.precedent.setDisabled(False)

        def precedentfunc():

            self.stackedWidget.setCurrentIndex(self.stackedWidget.currentIndex() - 1)

            if self.stackedWidget.currentIndex() == 0:

                self.precedent.setDisabled(True)

            else:

                self.suivant.setDisabled(False)

        self.suivant.clicked.connect(suivantfunc)

        self.precedent.clicked.connect(precedentfunc)

        self.logslabel.setReadOnly(True)

        self.labelinfo.setStyleSheet("color: gray;")

        self.pushButton_5.setDisabled(True)

        global pluginpath

        pluginpath = os.path.dirname(os.path.realpath(__file__))

        global proprietaire

        if proprietaire == '':

            f = open(pluginpath+'\\memory\\proprietaire.siobuilder', 'rb')

            try:

                proprietaire = pickle.load(f)

            except:

                proprietaire = None

            self.proprietaire.setText(proprietaire)

            f.close()

        global gestionnaire

        if gestionnaire == '':

            f = open(pluginpath+'\\memory\\gestionnaire.siobuilder', 'rb')

            try :

                gestionnaire = pickle.load(f)

            except :

                gestionnaire = None

            self.gestionnaire.setText(gestionnaire)

            f.close()

        global FuSettings

        f = open(pluginpath+'\\memory\\FuSettings.siobuilder', 'rb')

        try :

            FuSettings = pickle.load(f)

        except :

            FuSettings = None

        f.close()

        if FuSettings == 'FU':

            self.radioButton.setChecked(True)

            self.radioButton_2.setChecked(False)

        else:

            self.radioButton_2.setChecked(True)

            self.radioButton.setChecked(False)

        f = open(pluginpath+'\\memory\\incrementationBTFile.siobuilder', 'rb')

        try:

            incrementationBTFile = pickle.load(f)

            self.fileLine.setText(incrementationBTFile)

            f.close()

            if incrementationBTFile != None :

                global incrementationBT

                self.fileLine.setText(incrementationBTFile)

                f = open(incrementationBTFile, 'rb')

                incrementationBT = pickle.load(f)

                self.incrementationBT.setValue(int(incrementationBT))

                f.close()

        except :

            incrementationBTFile = None

        

        global incrementationPTFile

        f = open(pluginpath+'\\memory\\incrementationPTFile.siobuilder', 'rb')

        try :

            incrementationPTFile = pickle.load(f)

        except :

            incrementationPTFile = None

        self.incrementationPTFile.setText(incrementationPTFile)

        f.close()

        global configPTFile

        f = open(pluginpath+'\\memory\\configPTFile.siobuilder', 'rb')

        try :

            configPTFile = pickle.load(f)

        except :

            configPTFile = None

        self.configPTFile.setText(configPTFile)

        f.close()

        self.mFeaturePickerWidget.setDisabled(True)

        self.mFeaturePickerWidget.setAllowNull(False)

        self.PTStreetViewButton.setDisabled(True)

        self.mFeaturePickerWidget_2.setDisabled(True)

        self.mFeaturePickerWidget_2.setAllowNull(False)

        self.BoiteStreetViewButton.setDisabled(True)

        

        def checkLyr():

            infra=0

            dbl=0

            chambre=0

            supportpiq=0

            site = 0

            boite = 0

            cable=0

            support=0

            point=0

            adduction=0

            zapbo=0

            commune = 0

            for layer in QgsProject.instance().mapLayers().values():

                if 'INFRA' in layer.name():

                    infra =1

                if not infra == 0 :

                    self.infra.setStyleSheet("color: green;")

                else :

                    self.infra.setStyleSheet("color: black;")

                    

                if 'DBL' in layer.name():

                    dbl =1

                if not dbl == 0 :

                    self.dbl.setStyleSheet("color: green;")

                else :

                    self.dbl.setStyleSheet("color: black;")

                    

                if 'CHAMBRE' in layer.name():

                    chambre =1

                if not chambre == 0 :

                    self.chambre.setStyleSheet("color: green;")

                else :

                    self.chambre.setStyleSheet("color: black;")

                

                if 'SUPPORT' in layer.name():

                    lyrType = layer.geometryType()

                    if lyrType == QgsWkbTypes.PointGeometry:

                        supportpiq =1

                if not supportpiq == 0 :

                    self.supportpiq.setStyleSheet("color: green;")

                else :

                    self.supportpiq.setStyleSheet("color: black;")

                

                if 'SITE' in layer.name():

                    site =1

                if not site == 0 :

                    self.site.setStyleSheet("color: green;")

                else :

                    self.site.setStyleSheet("color: black;")

                    

                if 'BOITE_OPTIQUE' in layer.name():

                    boite =1

                    self.mFeaturePickerWidget_2.setLayer(layer)

                if not boite == 0 :

                    self.boite.setStyleSheet("color: green;")

                    self.mFeaturePickerWidget_2.setDisabled(False)

                    self.BoiteStreetViewButton.setDisabled(False)

                else :

                    self.boite.setStyleSheet("color: black;")

                    self.mFeaturePickerWidget_2.setDisabled(True)

                    self.BoiteStreetViewButton.setDisabled(True)

                

                if 'CABLE_OPTIQUE' in layer.name():

                    cable =1

                if not cable == 0 :

                    self.cable.setStyleSheet("color: green;")

                else :

                    self.cable.setStyleSheet("color: black;")

                    

                if 'SUPPORT_' in layer.name():

                    support =1

                if not support == 0 :

                    self.support.setStyleSheet("color: green;")

                else :

                    self.support.setStyleSheet("color: black;")

                    

                if 'POINT_TECHNIQUE' in layer.name():

                    point =1

                    self.mFeaturePickerWidget.setLayer(layer)

                if not point == 0 :

                    self.point.setStyleSheet("color: green;")

                    self.mFeaturePickerWidget.setDisabled(False)

                    self.PTStreetViewButton.setDisabled(False)

                else :

                    self.point.setStyleSheet("color: black;")

                    self.mFeaturePickerWidget.setDisabled(True)

                    self.PTStreetViewButton.setDisabled(True)

                    

                if 'ADDUCTION' in layer.name():

                    adduction =1

                if not adduction == 0 :

                    self.adduction.setStyleSheet("color: green;")

                else :

                    self.adduction.setStyleSheet("color: black;")

                    

                if 'ZAPBO' in layer.name():

                    zapbo =1

                if not zapbo == 0 :

                    self.zapbo.setStyleSheet("color: green;")

                else :

                    self.zapbo.setStyleSheet("color: black;")

                    

                if 'COMMUNE' in layer.name():

                    commune =1

                if not commune == 0 :

                    self.commune.setStyleSheet("color: green;")

                else :

                    self.commune.setStyleSheet("color: black;")

        checkLyr()

        QgsProject.instance().layersAdded.connect(checkLyr)

        QgsProject.instance().layersRemoved.connect(checkLyr)

        

                

    def adductions(self):

        global adductionSansInfra

        global DBLnonRaccorde

        self.labelinfo.setText("Création des adductions en cours ...")

        if QMessageBox.Ok == QMessageBox.question(self, "Création des adductions", "Le processus peut prendre plusieurs minutes. Voulez-vous continuer ?", QMessageBox.Ok|QMessageBox.Cancel):

            createAdduction()

        self.labelinfo.setText("Création des adductions terminée ...")

        if not adductionSansInfra == '':

            self.logslabel.moveCursor(QtGui.QTextCursor.End)

            self.logslabel.insertPlainText(adductionSansInfra+"\r\r\n")

            adductionSansInfra=''

        if not DBLnonRaccorde =='':

            self.logslabel.moveCursor(QtGui.QTextCursor.End)

            self.logslabel.insertPlainText(DBLnonRaccorde+"\r\r\n")

            DBLnonRaccorde = ''

            

    def cables(self):

        global creationcableactive

        global proprietaire

        global gestionnaire

        global type_fonc_cable

        controlboite = 0

        controlsite = 0

        proprietaire = self.proprietaire.text()

        gestionnaire = self.gestionnaire.text()

        self.groupBox_3.setDisabled(True)

        if proprietaire == '' or gestionnaire == '':

            QMessageBox.warning(self, "Paramètre vide", 'Attention, le propriétaire et/ou gestionnaire sont vides.\nIl est nécessaire de désactiver la création de câble pour les mettre à jour.')

        type_fonc_cable = self.type_fonc_cable.currentText()

        for layer in QgsProject.instance().mapLayers().values():

            if 'BOITE_OPTIQUE' in layer.name():

                boitelyr = layer

                controlboite +=1

            if 'SITE' in layer.name():

                sitelyr = layer

                controlsite +=1

        

        if controlboite == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche BOITE_OPTIQUE n\'est pas présente')

        if controlsite == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche SITE n\'est pas présente')

        

        if not controlboite ==0 and not controlsite == 0:

            creationcableactive = 1

            self.pushButton_2.setStyleSheet("color: green;")

            self.pushButton_2.setDisabled(True)

            self.pushButton_5.setDisabled(False)

            self.suivant.setDisabled(True)

            self.precedent.setDisabled(True)

            self.type_fonc_cable.setDisabled(True)

            self.labelinfo.setText("Création des câbles activée ...")

            for feat in sitelyr.getFeatures():

                if "PMU" in str(feat["NOM"]):

                    sitelyr.select(feat.id())

                    iface.copySelectionToClipboard(sitelyr)

                    boitelyr.startEditing()

                    iface.pasteFromClipboard(boitelyr)

                    sitelyr.removeSelection()

                if "NRO" in str(feat["NOM"]):

                    sitelyr.select(feat.id())

                    iface.copySelectionToClipboard(sitelyr)

                    boitelyr.startEditing()

                    iface.pasteFromClipboard(boitelyr)

                    sitelyr.removeSelection()

            boitelyr.selectionChanged.connect(createCable)



    def stopCreateCable(self):

        global creationcableactive

        if creationcableactive == 1:

            self.pushButton_5.setDisabled(True)

            self.groupBox_3.setDisabled(False)

            creationcableactive = 0

            global CableImpossible

            controlboite = 0

            self.pushButton_2.setStyleSheet("color: black;")

            self.suivant.setDisabled(False)

            self.precedent.setDisabled(False)

            self.pushButton_2.setDisabled(False)

            self.type_fonc_cable.setDisabled(False)

            if not CableImpossible == '':

                self.logslabel.moveCursor(QtGui.QTextCursor.End)

                self.logslabel.insertPlainText(CableImpossible+"\r\r\n")

                CableImpossible = ''

            for layer in QgsProject.instance().mapLayers().values():

                if 'BOITE_OPTIQUE' in layer.name():

                    boitelyr = layer

                    controlboite +=1

            

            if controlboite == 0:

                QMessageBox.critical(self, "Couche manquante", 'La couche BOITE_OPTIQUE n\'est pas présente')

            

            if not controlboite ==0 :

                self.labelinfo.setText("Création des câbles désactivée ...")

                boitelyr.selectionChanged.disconnect(createCable)

                for feat in boitelyr.getFeatures():

                    if "NRO" in feat["NOM"]:

                        boitelyr.deleteFeature(feat.id())

                        boitelyr.removeSelection()

                    if "SRO" in feat["NOM"]:

                        boitelyr.deleteFeature(feat.id())

                        boitelyr.removeSelection()

                boitelyr.commitChanges()



    def supports(self):

        controlcable = 0

        controlchambre = 0

        controlsupport = 0

        controlsupportpiq = 0

        controlpt = 0

        intersectchambre = 0

        intersectappui = 0

        controlinfra = 0

        nomSRO = self.nomSRO.text()

        for layer in QgsProject.instance().mapLayers().values():

            if 'CHAMBRE' in layer.name():

                chambrelyr = layer

                controlchambre +=1

                chambrelyr.removeSelection()

            if 'CABLE_OPTIQUE' in layer.name():

                cablelyr = layer

                controlcable += 1

                cablelyr.removeSelection()

            if 'SUPPORT' in layer.name():

                lyrType = layer.geometryType()

                if lyrType == QgsWkbTypes.PointGeometry:

                    supportpiq = layer

                    controlsupportpiq += 1

                    supportpiq.removeSelection()

            if 'SUPPORT_' in layer.name():

                supportlyr = layer

                controlsupport += 1

                supportlyr.removeSelection()

            if 'POINT_TECHNIQUE' in layer.name():

                ptlyr = layer

                controlpt += 1

                ptlyr.removeSelection()

            if 'INFRA' in layer.name():

                infralyr = layer

                controlinfra += 1

                infralyr.removeSelection()



        if controlcable == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche CABLE_OPTIQUE n\'est pas présente')

            

        if controlchambre == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche CHAMBRE n\'est pas présente')

            

        if controlsupport == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche SUPPORT n\'est pas présente')

            

        if controlsupportpiq == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche SUPPORT (piquetage) n\'est pas présente')

        

        if controlpt == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche POINT_TECHNIQUE n\'est pas présente')

            

        if controlinfra == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche INFRA n\'est pas présente')

        

        if not nomSRO == '':

            if not controlcable ==0 and not controlchambre == 0 and not controlsupport == 0 and not controlsupportpiq == 0 and not controlpt == 0 and not controlinfra == 0:

                self.labelinfo.setText("Création des supports en cours ...")

                if QMessageBox.Ok == QMessageBox.question(self, "Création des supports", "Le processus peut prendre plusieurs minutes. Voulez-vous continuer ?", QMessageBox.Ok|QMessageBox.Cancel):    

                    parameters = { 'DISSOLVE' : False, 'DISTANCE' : 0.05,

                        'END_CAP_STYLE' : 0,

                        'INPUT' : ptlyr,

                        'JOIN_STYLE' : 0,

                        'MITER_LIMIT' : 2,

                        'OUTPUT' : 'TEMPORARY_OUTPUT',

                        'SEGMENTS' : 10 }

                    tamponcable = processing.run("native:buffer", parameters)['OUTPUT']

                    

                    parameters = { 'INPUT' : tamponcable,

                        'OUTPUT' : 'TEMPORARY_OUTPUT',

                        'SEGMENTS' : 8 }

                    cercle = processing.run("native:minimumenclosingcircle", parameters)['OUTPUT']

                    

                    parameters = { 'INPUT' : cercle,

                        'OUTPUT' : 'TEMPORARY_OUTPUT' }

                    sommets = processing.run("native:extractvertices", parameters)['OUTPUT']

                    

                    parameters = { 'FIELD' : 'CODE',

                        'HUBS' : ptlyr,

                        'INPUT' :sommets,

                        'OUTPUT' : 'TEMPORARY_OUTPUT',

                        'UNIT' : 0 }

                    lignesverscentre = processing.run("qgis:distancetonearesthublinetohub", parameters)['OUTPUT']

                    

                    parameters = { 'INPUT' : cablelyr,

                        'LINES' :lignesverscentre,

                        'OUTPUT' : 'TEMPORARY_OUTPUT' }

                    couperavecligne = processing.run("native:splitwithlines", parameters)['OUTPUT']

                    

                    parameters = { 'INPUT' : couperavecligne,

                        'OUTPUT' : 'TEMPORARY_OUTPUT' }

                    newsupport = processing.run("native:deleteduplicategeometries", parameters)['OUTPUT']

                    

                    newsupport.selectAll()

                    iface.copySelectionToClipboard(newsupport)

                    supportlyr.startEditing()

                    iface.pasteFromClipboard(supportlyr)

                    supportlyr.commitChanges()

                    supportlyr.startEditing()

                    proprietairesupport = supportlyr.fields().indexOf('PROPRIETAI')

                    gestionnairesupport = supportlyr.fields().indexOf('GESTIONNAI')

                    typestrucsupport = supportlyr.fields().indexOf('TYPE_STRUC')

                    

                    

                    

                    

                    

                    

                    

                    lgrfield = supportlyr.fields().indexOf('LG_REELLE')

                    commentfield = supportlyr.fields().indexOf('COMMENT')

                    nomfield = supportlyr.fields().indexOf('NOM')

                    codefield = supportlyr.fields().indexOf('CODE')

                    

                    for featuresupport in supportlyr.getFeatures():

                        lgr = featuresupport.geometry().length()

                        supportlyr.changeAttributeValue(featuresupport.id(), lgrfield, lgr)

                        supportlyr.changeAttributeValue(featuresupport.id(), commentfield, '')

                        supportlyr.changeAttributeValue(featuresupport.id(), nomfield, '')

                        supportlyr.changeAttributeValue(featuresupport.id(), codefield, '')

                        if lgr == 0 :

                            supportlyr.deleteFeature(featuresupport.id())

                        

                    amontfield = supportlyr.fields().indexOf('AMONT')

                    avalfield = supportlyr.fields().indexOf('AVAL')

                    nomfield = supportlyr.fields().indexOf('NOM')

                    codefield = supportlyr.fields().indexOf('CODE')

                    structurefield = supportlyr.fields().indexOf('STRUCTURE')

                    modeposefield = supportlyr.fields().indexOf('MODE_POSE')



                    for featuresupport in supportlyr.getFeatures():

                        supportlyr.removeSelection()

                        ptlyr.removeSelection()

                        supportlyr.select(featuresupport.id())

                        parameters = {'INPUT' : ptlyr,

                            'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(),selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),

                            'METHOD' : 0,

                            'PREDICATE' : [0] }

                        processing.run('qgis:selectbylocation', parameters)

                        i=0

                        for featurept in ptlyr.selectedFeatures():

                            codePT = featurept["CODE"]

                            proprioPT = featurept["PROPRIETAI"]

                            if ptlyr.selectedFeatureCount()>1:

                                if i == 1:

                                    supportlyr.changeAttributeValue(featuresupport.id(), avalfield, codePT)

                                    i=0

                                    if proprioPT == "ENEDIS" and proprioAmont == "ENEDIS":

                                        supportlyr.changeAttributeValue(featuresupport.id(), gestionnairesupport, 'ENEDIS')

                                        supportlyr.changeAttributeValue(featuresupport.id(), proprietairesupport, 'ENEDIS')

                                        supportlyr.changeAttributeValue(featuresupport.id(), typestrucsupport, 'ELECTRICITE')

                                    else :

                                        supportlyr.changeAttributeValue(featuresupport.id(), gestionnairesupport, 'ORANGE')

                                        supportlyr.changeAttributeValue(featuresupport.id(), proprietairesupport, 'ORANGE')

                                        supportlyr.changeAttributeValue(featuresupport.id(), typestrucsupport, 'TELECOM')



                                else:

                                    supportlyr.changeAttributeValue(featuresupport.id(), amontfield, codePT)

                                    proprioAmont = proprioPT

                                    i+=1



                            else:

                                supportlyr.changeAttributeValue(featuresupport.id(), amontfield, codePT)

                                supportlyr.changeAttributeValue(featuresupport.id(), gestionnairesupport, 'SUPPORT A VERIFIER')

                                supportlyr.changeAttributeValue(featuresupport.id(), proprietairesupport, 'SUPPORT A VERIFIER')

                                supportlyr.changeAttributeValue(featuresupport.id(), typestrucsupport, 'TELECOM')

                                

                        

                    supportlyr.commitChanges()

                    supportlyr.startEditing()

                    

                    nomSRO = self.nomSRO.text()

                    

                    for featuresupport in supportlyr.getFeatures():

                        amont = featuresupport["AMONT"]

                        aval = featuresupport["AVAL"]

                        amontreduit = str(amont)[0:3]

                        avalreduit = str(aval)[0:3]

                        amontcode = str(amont)[10:14]

                        avalcode = str(aval)[10:14]

                        if amontreduit == 'POT':

                            supportlyr.changeAttributeValue(featuresupport.id(), nomfield, 'AER-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), codefield, 'AER-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), structurefield, 'AER')

                        if avalreduit == 'POT':

                            supportlyr.changeAttributeValue(featuresupport.id(), nomfield, 'AER-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), codefield, 'AER-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), structurefield, 'AER')

                        if amontreduit == 'CHA':

                            supportlyr.changeAttributeValue(featuresupport.id(), nomfield, 'EXI-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), codefield, 'EXI-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), structurefield, 'EXI')

                            supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 7)

                        if avalreduit == 'CHA':

                            supportlyr.changeAttributeValue(featuresupport.id(), nomfield, 'EXI-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), codefield, 'EXI-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), structurefield, 'EXI')

                            supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 7)

                        if amontreduit == 'CRO':

                            supportlyr.changeAttributeValue(featuresupport.id(), nomfield, 'FAC-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), codefield, 'FAC-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), structurefield, 'FAC')

                            supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 2)

                        if avalreduit == 'CRO':

                            supportlyr.changeAttributeValue(featuresupport.id(), nomfield, 'FAC-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), codefield, 'FAC-'+nomSRO+'-'+amontcode+'-'+avalcode)

                            supportlyr.changeAttributeValue(featuresupport.id(), structurefield, 'FAC')

                            supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 2)

                    supportlyr.commitChanges()

                    supportlyr.startEditing()



                    for featuresupport in supportlyr.getFeatures():

#                        amontproprietaire = ''

#                        avalproprietaire = ''

#                        for featurept in ptlyr.getFeatures():

#                            if featuresupport["AMONT"] == featurept["CODE"]:

#                                amontproprietaire = featurept["PROPRIETAI"]

#                            if featuresupport["AVAL"] == featurept["CODE"]:

#                                avalproprietaire = featurept["PROPRIETAI"]

#                                

#                            if amontproprietaire == "ORANGE" or avalproprietaire == "ORANGE":

#                                supportlyr.changeAttributeValue(featuresupport.id(), gestionnairesupport, 'ORANGE')

#                                supportlyr.changeAttributeValue(featuresupport.id(), proprietairesupport, 'ORANGE')

#                                supportlyr.changeAttributeValue(featuresupport.id(), typestrucsupport, 'TELECOM')

#                                if featuresupport["STRUCTURE"] == "AER":

#                                    supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 0)

#                                

#                                

#                            if amontproprietaire == "ENEDIS" and avalproprietaire == "ENEDIS":

#                                supportlyr.changeAttributeValue(featuresupport.id(), gestionnairesupport, 'ENEDIS')

#                                supportlyr.changeAttributeValue(featuresupport.id(), proprietairesupport, 'ENEDIS')

#                                supportlyr.changeAttributeValue(featuresupport.id(), typestrucsupport, 'ELECTRICITE')

#                                supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 1)

#__________________________________________________________________________________________________________



                        intersecttrans = 0

                        intersectdistri = 0

                        for featurecable in cablelyr.getFeatures():

                            if featurecable.geometry().intersects(featuresupport.geometry()):

                                if featurecable["NOM"][0:3] == "CDI":

                                    intersectdistri = 1

                                if featurecable["NOM"][0:3] == "CTR":

                                    intersecttrans = 1

                        if intersectdistri == 1 :

                            utilisatio = 'D'

                        if intersecttrans == 1 :

                            utilisatio = 'T'

                        if intersecttrans == 1 and intersectdistri == 1 :

                            utilisatio = 'TD'

                        

                        utilisatiofield = supportlyr.fields().indexOf('UTILISATIO')

                        supportlyr.changeAttributeValue(featuresupport.id(), utilisatiofield, utilisatio)

                        if featuresupport["STRUCTURE"] == "AER":

                            if featuresupport["PROPRIETAI"] == "ORANGE":

                                supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 0)

                            if featuresupport["PROPRIETAI"] == "ENEDIS":

                                supportlyr.changeAttributeValue(featuresupport.id(), modeposefield, 1)

                                

                            

                    

                    parameters = { 'DISCARD_NONMATCHING' : False,

                        'INPUT' : supportlyr,

                        'JOIN' : infralyr,

                        'JOIN_FIELDS' : ['COMPOSITIO'],

                        'METHOD' : 0,

                        'OUTPUT' : 'TEMPORARY_OUTPUT',

                        'PREDICATE' : [5],

                        'PREFIX' : '' }

                    result = processing.run("qgis:joinattributesbylocation", parameters)['OUTPUT']

                    result.setName(f'joinattributesbylocalisation') # changing the output name

                    QgsProject.instance().addMapLayer(result) # adding output to the map

                    for layer in QgsProject.instance().mapLayers().values():

                        if f'joinattributesbylocalisation' in layer.name():

                            joinattributesbylocalisation = layer

                    joinattributesbylocalisation.startEditing()

                    compofield = supportlyr.fields().indexOf('COMPO')

                    compovide = 0

                    for featuresupport in supportlyr.getFeatures():

                        for feature in joinattributesbylocalisation.getFeatures():

                            if featuresupport["NOM"] == feature["NOM"]:

                                if not feature["COMPOSITIO"] == NULL:

                                    compo = feature["COMPOSITIO"].replace("Ø", "D")

                                    compo = feature["COMPOSITIO"].replace("Ã˜", "D")

                                else :

                                    compo = ''

                                    if featuresupport["STRUCTURE"] == "EXI":

                                        compovide +=1

                                supportlyr.changeAttributeValue(featuresupport.id(), compofield, compo)

                    QgsProject.instance().removeMapLayers([joinattributesbylocalisation.id()])

                    if not compovide == 0:

                        self.logslabel.moveCursor(QtGui.QTextCursor.End)

                        self.logslabel.insertPlainText('Impossible de compléter la composition pour '+str(compovide)+' supports'+"\r\r\n")

                    supportlyr.commitChanges()

                    self.labelinfo.setText("Création des supports terminée ...")

        else : 

            QMessageBox.critical(self, "Information manquante", 'Le nom du SRO n\'est pas renseigné')

            

    def calculs(self):

        self.labelinfo.setText("Calculs des câbles en cours ...")

        if QMessageBox.Ok == QMessageBox.question(self, "Calculs des câbles", "Le processus peut prendre plusieurs minutes. Voulez-vous continuer ?", QMessageBox.Ok|QMessageBox.Cancel):

            controlboite = 0 

            controlcable = 0

            for layer in QgsProject.instance().mapLayers().values():

                if 'BOITE_OPTIQUE' in layer.name():

                    boitelyr = layer

                    controlboite +=1

                    

                if 'CABLE_OPTIQUE' in layer.name():

                    cablelyr = layer

                    controlcable +=1

                    

            

            if controlboite == 0 :

                QMessageBox.critical(self, "Couche manquante", 'La couche BOITE_OPTIQUE n\'est pas présente')

            

            if controlcable ==0:

                QMessageBox.critical(self, "Couche manquante", 'La couche CABLE_OPTIQUE n\'est pas présente')

            verifnbabonnes=0

            verifnbfutile=0

            if not controlboite == 0 and not controlcable ==0:

                for featureboite in boitelyr.getFeatures():

                    if featureboite["NBABONNES"] == NULL:

                        verifnbabonnes +=1

                    if featureboite["NBFUTILE"] == NULL:

                        verifnbfutile +=1

                if not verifnbabonnes>0 and not verifnbfutile>0:

                    nomSRO = self.nomSRO.text()

                    # def calculFU():

                    #     for extremiteCable in cablelyr.getFeatures():

                    #         extremite = extremiteCable["EXTREMITE"]

                    #         X=0

                    #         Y=0

                    #         for origineCable in cablelyr.getFeatures():

                    #             origine = origineCable["ORIGINE"]

                    #             if extremite == origine:

                    #                 if origineCable["NB_FUTILE"]:

                    #                     X = origineCable["NB_FUTILE"] + X

                    #                 else:

                    #                     X+=1

                    #             else :

                    #                 pass

                    #         if not X==0:

                    #             pass

                    #         else : 

                    #             for featureboite in boitelyr.getFeatures():

                    #                 if featureboite["NOM"] == extremiteCable["EXTREMITE"]:

                    #                     if not extremiteCable["NB_FUTILE"]:

                    #                         cablelyr.startEditing()

                    #                         FU = cablelyr.fields().indexOf('NB_FUTILE')

                    #                         FUboite = featureboite["NBFUTILE"]

                    #                         cablelyr.changeAttributeValue(extremiteCable.id(), FU, FUboite)

                    #     for extremiteCable in cablelyr.getFeatures():

                    #         extremite = extremiteCable["EXTREMITE"]

                    #         X=0

                    #         Y=0

                    #         for origineCable in cablelyr.getFeatures():

                    #             origine = origineCable["ORIGINE"]

                    #             if extremite == origine:

                    #                 if origineCable["NB_FUTILE"]:

                    #                     X = origineCable["NB_FUTILE"] + X

                    #             else :

                    #                 pass

                    #         if not X==0:

                    #             for featureboite in boitelyr.getFeatures():

                    #                 if featureboite["NOM"] == extremiteCable["EXTREMITE"]:

                    #                     FUboite = featureboite["NBFUTILE"]

                    #                     if FUboite:

                    #                         X = X + FUboite

                    #                 cablelyr.startEditing()

                    #                 FU = cablelyr.fields().indexOf('NB_FUTILE')

                    #                 cablelyr.changeAttributeValue(extremiteCable.id(), FU, X)



                    # stopcounter = 0

                    # nullcounter = 1

                    # while nullcounter != 0:

                    #     P = 0

                    #     stopcounter += 1 

                    #     for featurecable in cablelyr.getFeatures():

                    #         if not featurecable["NB_FUTILE"]:

                    #             P += 1

                    #     if P==0:

                    #         calculFU()

                    #         calculFU()

                    #         calculFU()

                    #         calculFU()

                    #         calculFU()

                    #         calculFU()

                    #         calculFU()

                    #         nullcounter=0

                    #     else:

                    #         cablelyr.startEditing()

                    #         calculFU()

                    #         cablelyr.commitChanges()

                            

                    #     if stopcounter == 12:

                    #         nullcounter = 0

                    #         QMessageBox.warning(self, "Calcul impossible", 'Vérifiez l\'origine et extremité des cables non calculés')

                    # cablelyr.commitChanges()

                    modecalcul = 1

                    pointdedepart = 'PMU-'+nomSRO

                    if len(pointdedepart) == 19:

                        sro = pointdedepart[4:14]

                    if len(pointdedepart) == 14:

                        sro = pointdedepart[4:]

                    syno = []



                    for boite in boitelyr.getFeatures():

                        if sro in boite["nom"]:

                            boitelyr.select(boite.id())

                            

                    for cable in cablelyr.getFeatures():

                        if sro in cable["nom"]:

                            cablelyr.select(cable.id())



                    #récupérer le tracé de toutes les boites extremités

                    for boite in boitelyr.getFeatures():

                        if sro in boite['nom']:

                            tabtemp = []

                            boiteactuelle = boite["nom"]

                            origine = 0

                            for cable in cablelyr.getFeatures():

                                if boiteactuelle == cable["origine"]:

                                    origine = 1

                            if origine ==0:

                                tabtemp.append(boiteactuelle)

                            x = 0

                            while (boiteactuelle != pointdedepart and origine == 0):

                                for cable in cablelyr.getFeatures():

                                    if sro in cable['nom']:

                                        if cable["extremite"] == boiteactuelle and boiteactuelle != pointdedepart:

                                            boiteactuelle = cable["origine"]

                                            tabtemp.append(boiteactuelle)

                                            x=0

                                x+=1

                                if x > 2:

                                    break

                            tabtemp.reverse()

                            if tabtemp:

                                syno.append(tabtemp)

                    templist = syno



                    syno = []

                    for index,ligne in enumerate(templist):

                        if ligne[0] == pointdedepart:

                            syno.append(templist[index])



                    flat_list = [item for sublist in syno for item in sublist]

                    listeerreur = []

                    for boite in boitelyr.getFeatures():

                        if boite['nom'] not in flat_list and sro in boite['nom']:

                            listeerreur.append(boite['nom'])





                    #compter le nb d'évenement maximum et compléter chaque ligne pour avoir le même nombre de valeur

                    nbevenement= []

                    for ligne in syno:

                        nbevenement.append(len(ligne))



                    maxevenement = max(nbevenement)



                    for indexligne, ligne in enumerate(syno):

                        if len(ligne) < maxevenement:

                            while len(ligne) < maxevenement:

                                syno[indexligne].append('')



                    #Trier le tableau en partant de la derniere colonne et remonter jusqu'à la premiere

                    maxevenement-=1

                    while maxevenement != 0:

                        syno = sorted(syno, key=itemgetter(maxevenement))

                        maxevenement-=1



                    roptemp = deepcopy(syno)

                    roptempftte = deepcopy(syno)

                    #Remplacer toute les valeurs en double par des valeurs vides

                    templist = []

                    for indexligne, ligne in  enumerate(syno):

                        for indexvaleur, valeur in enumerate(ligne):

                            if valeur in templist:

                                    syno[indexligne][indexvaleur] = ''

                            else:

                                templist.append(valeur)



                    tableaupourrop = deepcopy(syno)



                    for indexligne, ligne in enumerate(tableaupourrop):

                        for indexboite, boite in enumerate(ligne):

                            if boite != '':

                                for feature in boitelyr.getFeatures():

                                    if feature["nom"] == boite:

                                        tableaupourrop[indexligne][indexboite] = [feature["nom"],feature["nbabonnes"],feature["nbfutile"]]



                    tableaupourrop.reverse()

                    for indexligne, ligne in enumerate(tableaupourrop):

                        i = len(ligne)-1

                        nbabonnes = 0

                        nbfutile = 0

                        while i >= 0:

                            if ligne[i] != '' and ligne[i] != pointdedepart:

                                nbabonnes = nbabonnes+ligne[i][1]

                                nbfutile = nbfutile+ligne[i][2]

                                ligne[i] = [ligne[i][0],nbabonnes,nbfutile]

                                if ligne[i-1] == '' and i-1 != 0:

                                    for cable in cablelyr.getFeatures():

                                        if cable["extremite"] == ligne[i][0]:

                                            for indexligne2, ligne2 in enumerate(tableaupourrop):

                                                for indexensemble2,ensemble2 in enumerate(ligne2):

                                                    if ensemble2 != '' and ensemble2 != pointdedepart:

                                                        if ensemble2[0] == cable["origine"]:

                                                            tableaupourrop[indexligne2][indexensemble2][1] = tableaupourrop[indexligne2][indexensemble2][1] + ligne[i][1]

                                                            tableaupourrop[indexligne2][indexensemble2][2] = tableaupourrop[indexligne2][indexensemble2][2] + ligne[i][2]

                            i-=1



                    tableaupourrop.reverse()

                    cablelyr.startEditing()

                    fuhfield = cablelyr.fields().indexOf('NB_FUTILE')



                    for ligne in tableaupourrop:

                        for boite in ligne:

                            if len(boite) == 3 :

                                for cable in cablelyr.getFeatures():

                                    if cable["extremite"] == boite[0]:

                                        cablelyr.changeAttributeValue(cable.id(), fuhfield, boite[2])

                else :

                    QMessageBox.critical(self, "Information manquante", 'Renseignez tous les champs NBABONNES et NBFUTILE de BOITE_OPTIQUE')

                    

        self.labelinfo.setText("Calculs des câbles terminé ...")

        

        

    def pointTechnique(self):

        self.labelinfo.setText("Création des points techniques en cours ...")

        if not self.nomSRO.text() == '':

            if QMessageBox.Ok == QMessageBox.question(self, "Création des points techniques", "Le processus peut prendre plusieurs minutes. Voulez-vous continuer ?", QMessageBox.Ok|QMessageBox.Cancel):

                nomSRO = self.nomSRO.text()

                controlcable = 0

                controlchambre = 0

                controlsupport = 0

                controldbl = 0

                controlpt = 0

                controlcommune = 0

                controladduction = 0

                global incrementationBT

                global incrementationPTFile

                global configPTFile

                incrementationBT = self.incrementationBT.value()

                for layer in QgsProject.instance().mapLayers().values():

                        if 'CABLE_OPTIQUE' in layer.name():

                            cablelyr = layer

                            controlcable +=1

                        if 'CHAMBRE' in layer.name():

                            chambre = layer

                            controlchambre +=1

                        if 'POINT_TECHNIQUE' in layer.name():

                            ptlyr = layer

                            controlpt +=1

                        if 'DBL' in layer.name():

                            dbllyr = layer

                            controldbl+=1

                        if 'SUPPORT' in layer.name():

                            lyrType = layer.geometryType()

                            if lyrType == QgsWkbTypes.PointGeometry:

                                support = layer

                                controlsupport +=1

                        if 'COMMUNE' in layer.name():

                            commune = layer

                            controlcommune +=1

                        if 'ADDUCTION' in layer.name():

                            adductionlyr = layer

                            controladduction +=1



                uri = QgsDataSourceUri()

                uri.setConnection("185.65.81.75","5432","pce_exe", None, None, authConfigId = "pce2022")

                uri.setDataSource("50_ens_couche_exe", "50_ens_configuration_pt_exe", None, aKeyColumn="incrementation")

                utilisation_pt =iface.addVectorLayer(uri.uri(False), "50_ens_configuration_pt_exe", "postgres")



                if controlcable == 0:

                    QMessageBox.critical(self, "Couche manquante", 'La couche CABLE_OPTIQUE n\'est pas présente')

                    

                if controlchambre == 0:

                    QMessageBox.critical(self, "Couche manquante", 'La couche CHAMBRE n\'est pas présente')

                    

                if controlpt == 0:

                    QMessageBox.critical(self, "Couche manquante", 'La couche POINT_TECHNIQUE n\'est pas présente')

                

                if controldbl == 0:

                    QMessageBox.critical(self, "Couche manquante", 'La couche DBL n\'est pas présente')

                

                if controlsupport == 0:

                    QMessageBox.critical(self, "Couche manquante", 'La couche SUPPORT n\'est pas présente')

                

                if controlcommune == 0:

                    QMessageBox.critical(self, "Couche manquante", 'La couche COMMUNES n\'est pas présente')

                    

                if controladduction == 0:

                    QMessageBox.critical(self, "Couche manquante", 'La couche ADDUCTION n\'est pas présente')

                

                if not controlcable == 0 and not controlchambre == 0 and not controlpt == 0 and not controldbl ==0 and not controlsupport == 0 and not controlcommune == 0 and not controladduction == 0:

                    codefield = ptlyr.fields().indexOf('CODE')

                    etatfield = ptlyr.fields().indexOf('ETAT')

                    proprietairefield = ptlyr.fields().indexOf('PROPRIETAI')

                    gestionnairefield = ptlyr.fields().indexOf('GESTIONNAI')

                    modelefield = ptlyr.fields().indexOf('MODELE')

                    typestrucfield = ptlyr.fields().indexOf('TYPE_STRUC')

                    emprisefield = ptlyr.fields().indexOf('EMPRISE')

                    longueurfield = ptlyr.fields().indexOf('LONGUEUR')

                    largeurfield = ptlyr.fields().indexOf('LARGEUR')

                    profhautfield = ptlyr.fields().indexOf('PROF_HAUT')

                    isolefield = ptlyr.fields().indexOf('ISOLE')

                    nomfield = ptlyr.fields().indexOf('NOM')

                    commentfield = ptlyr.fields().indexOf('COMMENT')

                    d3field = ptlyr.fields().indexOf('D3')

                    idparentfield = ptlyr.fields().indexOf('ID_PARENT')

                    rattachfield = ptlyr.fields().indexOf('RATTACH')

                    secteurfield = ptlyr.fields().indexOf('SECTEUR')

                    

                    dateposefield = ptlyr.fields().indexOf('DATE_POSE')

                    parameters = { 'INPUT' : chambre, 

                                    'INTERSECT' : cablelyr, 

                                    'METHOD' : 0, 

                                    'PREDICATE' : [0] }



                    processing.run('qgis:selectbylocation', parameters )

                    if chambre.selectedFeatureCount() > 0:

                        iface.copySelectionToClipboard(chambre)

                        ptlyr.startEditing()

                        iface.pasteFromClipboard(ptlyr)



                    parameters = { 'INPUT' : support, 

                                    'INTERSECT' : cablelyr, 

                                    'METHOD' : 0, 

                                    'PREDICATE' : [0] }



                    processing.run('qgis:selectbylocation', parameters )

                    if support.selectedFeatureCount() > 0:

                        iface.copySelectionToClipboard(support)

                        ptlyr.startEditing()

                        iface.pasteFromClipboard(ptlyr)



                    parameters = { 'INPUT' : dbllyr, 

                                    'INTERSECT' : cablelyr, 

                                    'METHOD' : 0, 

                                    'PREDICATE' : [0] }



                    processing.run('qgis:selectbylocation', parameters )

                    if dbllyr.selectedFeatureCount() > 0:

                        iface.copySelectionToClipboard(dbllyr)

                        ptlyr.startEditing()

                        iface.pasteFromClipboard(ptlyr)

                        

                    

                    parameters = { 'INPUT' : chambre, 

                                    'INTERSECT' : adductionlyr, 

                                    'METHOD' : 0, 

                                    'PREDICATE' : [0] }



                    processing.run('qgis:selectbylocation', parameters )

                    if chambre.selectedFeatureCount() > 0:

                        iface.copySelectionToClipboard(chambre)

                        ptlyr.startEditing()

                        iface.pasteFromClipboard(ptlyr)



                    parameters = { 'INPUT' : support, 

                                    'INTERSECT' : adductionlyr, 

                                    'METHOD' : 0, 

                                    'PREDICATE' : [0] }



                    processing.run('qgis:selectbylocation', parameters )

                    if support.selectedFeatureCount() > 0:

                        iface.copySelectionToClipboard(support)

                        ptlyr.startEditing()

                        iface.pasteFromClipboard(ptlyr)

                        

                    parameters = { 'INPUT' : ptlyr,

                        'OUTPUT' : 'TEMPORARY_OUTPUT' }

                    result = processing.run("native:deleteduplicategeometries", parameters)['OUTPUT']

                    result.setName('doublonssupprimes') # changing the output name

                    QgsProject.instance().addMapLayer(result) # adding output to the map

                    for layer in QgsProject.instance().mapLayers().values():

                        if 'doublonssupprimes' in layer.name():

                            doublonssupprimes = layer

                    ptlyr.selectAll()

                    ptlyr.deleteSelectedFeatures()

                    doublonssupprimes.selectAll()

                    iface.copySelectionToClipboard(doublonssupprimes)

                    ptlyr.startEditing()

                    iface.pasteFromClipboard(ptlyr)

                    QgsProject.instance().removeMapLayers([doublonssupprimes.id()])

                    PTLogs = 'Points techniques créés :\r     - '+str(ptlyr.selectedFeatureCount())+' au total'

                    

                    

                    FT = 0

                    INDISPONIBLE = 0

                    incrementationBT = 0

                    for featurept in ptlyr.getFeatures():

                        ptlyr.changeAttributeValue(featurept.id(), longueurfield, 0)

                        ptlyr.changeAttributeValue(featurept.id(), largeurfield, 0)

                        ptlyr.changeAttributeValue(featurept.id(), isolefield, 0)

                        ptlyr.changeAttributeValue(featurept.id(), etatfield, 'PROJET')

                        rattach = 'PMU-'+self.nomSRO.text()

                        secteur = self.nomSRO.text()[7:10]

                        ptlyr.changeAttributeValue(featurept.id(), rattachfield, rattach)

                        ptlyr.changeAttributeValue(featurept.id(), secteurfield, secteur)

                        

                        for featurecommune in commune.getFeatures():

                            if featurept.geometry().intersects(featurecommune.geometry()):

                                communeid = featurecommune["insee"]

                                

                        for featurechambre in chambre.getFeatures():

                            if featurechambre.geometry().intersects(featurept.geometry()):

                                codech1 = featurechambre["CODE_CH1"]

                                if not codech1 == NULL :

                                    nomChambre = str(communeid) + '/' + str(codech1)

                                else :

                                    FT +=1

                                    nomChambre = str(communeid) + '/FT' + str(FT)

                                ptlyr.changeAttributeValue(featurept.id(), nomfield, nomChambre)

                                ptlyr.changeAttributeValue(featurept.id(), proprietairefield, 'ORANGE')

                                ptlyr.changeAttributeValue(featurept.id(), gestionnairefield, 'ORANGE')

                                modeleChambre = featurechambre["REF_CHAMBR"]

                                if '30X' in modeleChambre :

                                    modeleChambre = 'REG'

                                ptlyr.changeAttributeValue(featurept.id(), modelefield, modeleChambre)

                                ptlyr.changeAttributeValue(featurept.id(), typestrucfield, 'CHAMBRE')

                                ptlyr.changeAttributeValue(featurept.id(), emprisefield, 'LOCATION')

                                if modeleChambre == 'L0T':

                                    longueur, largeur = 420 , 240

                                elif modeleChambre == 'L1T' : 

                                    longueur, largeur = 520 , 380

                                elif modeleChambre == 'A2' : 

                                    longueur, largeur = 885 , 520

                                elif modeleChambre == 'A1' : 

                                    longueur, largeur = 1160 , 380

                                elif modeleChambre == 'A3' : 

                                    longueur, largeur = 1160 , 380

                                elif modeleChambre == 'L2T' : 

                                    longueur, largeur = 1160 , 380

                                elif modeleChambre == 'L3T' : 

                                    longueur, largeur = 1380 , 520

                                elif modeleChambre == 'A4' : 

                                    longueur, largeur = 1870 , 520

                                elif modeleChambre == 'D1' : 

                                    longueur, largeur = 1870 , 520

                                elif modeleChambre == 'L4T' : 

                                    longueur, largeur = 1870 , 520

                                elif modeleChambre == 'B1' : 

                                    longueur, largeur = 1790 , 880

                                elif modeleChambre == 'L5T' : 

                                    longueur, largeur = 1790 , 880

                                elif modeleChambre == 'B2' : 

                                    longueur, largeur = 2420 , 880

                                elif modeleChambre == 'L6T' : 

                                    longueur, largeur = 2420 , 880

                                elif modeleChambre == 'M1' : 

                                    longueur, largeur = 1870 , 1050

                                elif modeleChambre == 'M2' : 

                                    longueur, largeur = 3060 , 1050

                                elif modeleChambre == 'D2' : 

                                    longueur, largeur = 2370 , 1050

                                elif modeleChambre == 'M3' : 

                                    longueur, largeur = 2370 , 1050

                                elif modeleChambre == 'K1C' : 

                                    longueur, largeur = 750 , 750

                                elif modeleChambre == 'K2C' : 

                                    longueur, largeur = 1500 , 750

                                elif modeleChambre == 'K3C' : 

                                    longueur, largeur = 2250 , 750

                                elif modeleChambre == 'C1' : 

                                    longueur, largeur = 2640 , 1270

                                elif modeleChambre == 'D3' : 

                                    longueur, largeur = 2640 , 1270

                                elif modeleChambre == 'P1' : 

                                    longueur, largeur = 2640 , 1270

                                elif modeleChambre == 'C2' : 

                                    longueur, largeur = 3520 , 1400

                                elif modeleChambre == 'D4' : 

                                    longueur, largeur = 3520 , 1400

                                elif modeleChambre == 'P2' : 

                                    longueur, largeur = 3520 , 1400

                                elif modeleChambre == 'E1' : 

                                    longueur, largeur = 4270 , 1760

                                elif modeleChambre == 'P3' : 

                                    longueur, largeur = 4270 , 1760

                                elif modeleChambre == 'C3' : 

                                    longueur, largeur = 5020 , 1760

                                elif modeleChambre == 'P4' : 

                                    longueur, largeur = 5020 , 1760

                                elif modeleChambre == 'E2' : 

                                    longueur, largeur = 4270 , 1760

                                elif modeleChambre == 'E3' : 

                                    longueur, largeur = 4270 , 1760

                                elif modeleChambre == 'P5' : 

                                    longueur, largeur = 4270 , 1760

                                elif modeleChambre == 'E4' : 

                                    longueur, largeur = 5280 , 2250

                                elif modeleChambre == 'P6' : 

                                    longueur, largeur = 5280 , 2250

                                elif modeleChambre == 'B3' : 

                                    longueur, largeur = 3500 , 850

                                elif modeleChambre == 'B4' : 

                                    longueur, largeur = 3500 , 1300

                                elif modeleChambre == 'L1C' : 

                                    longueur, largeur = 520 , 380

                                elif modeleChambre == 'L2C' : 

                                    longueur, largeur = 1160 , 600

                                elif modeleChambre == 'L3C' : 

                                    longueur, largeur = 1380 , 600

                                elif modeleChambre == 'M1C' : 

                                    longueur, largeur = 1870 , 1050

                                elif modeleChambre == 'M3C' : 

                                    longueur, largeur = 2370 , 1050

                                elif modeleChambre == 'P1C' : 

                                    longueur, largeur = 2540 , 1170

                                elif modeleChambre == 'P2C' : 

                                    longueur, largeur = 3640 , 1520
                                else :

                                    longueur, largeur = NULL, NULL

                                

                                ptlyr.changeAttributeValue(featurept.id(), longueurfield, longueur)

                                ptlyr.changeAttributeValue(featurept.id(), largeurfield, largeur)
                        

                        for featuresupport in support.getFeatures():

                            if featuresupport.geometry().intersects(featurept.geometry()):

                                typeSupport = featuresupport["Type"]

                                modeleSupport = featuresupport["Classe"]

                                hauteurSupport = featuresupport["Hauteur"]

                                if typeSupport == "POT_FT":

                                    nomAppui = featuresupport["NOM"]

                                    if not nomAppui == NULL:

                                        nomAppui = str(communeid) + '/' + str(nomAppui)

                                    else:

                                        FT +=1

                                        nomAppui = str(communeid) + '/AE' + str(FT)

                                    ptlyr.changeAttributeValue(featurept.id(), nomfield, nomAppui)

                                    ptlyr.changeAttributeValue(featurept.id(), proprietairefield, 'ORANGE')

                                    ptlyr.changeAttributeValue(featurept.id(), gestionnairefield, 'ORANGE')

                                    ptlyr.changeAttributeValue(featurept.id(), modelefield, modeleSupport)

                                    ptlyr.changeAttributeValue(featurept.id(), profhautfield, hauteurSupport)

                                    ptlyr.changeAttributeValue(featurept.id(), typestrucfield, 'APPUI')

                                    ptlyr.changeAttributeValue(featurept.id(), emprisefield, 'LOCATION')

                                if typeSupport == "POT_BT":

                                    incrementationBT +=1

                                    nomAppui = str(communeid) + '/BT' + str(incrementationBT).zfill(4)

                                    ptlyr.changeAttributeValue(featurept.id(), nomfield, nomAppui)

                                    ptlyr.changeAttributeValue(featurept.id(), proprietairefield, 'ENEDIS')

                                    ptlyr.changeAttributeValue(featurept.id(), gestionnairefield, 'ENEDIS')

                                    ptlyr.changeAttributeValue(featurept.id(), modelefield, modeleSupport)

                                    ptlyr.changeAttributeValue(featurept.id(), profhautfield, hauteurSupport)

                                    ptlyr.changeAttributeValue(featurept.id(), typestrucfield, 'APPUI')

                                    ptlyr.changeAttributeValue(featurept.id(), emprisefield, 'LOCATION')

                                if typeSupport == "POTELET_FT":

                                    FT +=1

                                    nomAppui = str(communeid) + '/AE' + str(FT)

                                    ptlyr.changeAttributeValue(featurept.id(), nomfield, nomAppui)

                                    ptlyr.changeAttributeValue(featurept.id(), proprietairefield, 'ORANGE')

                                    ptlyr.changeAttributeValue(featurept.id(), gestionnairefield, 'ORANGE')

                                    ptlyr.changeAttributeValue(featurept.id(), modelefield, 'POTL')

                                    ptlyr.changeAttributeValue(featurept.id(), typestrucfield, 'APPUI')

                                    ptlyr.changeAttributeValue(featurept.id(), emprisefield, 'LOCATION')

                                if typeSupport == "FACADE" or typeSupport == "BOITIER" or typeSupport == "POTELET_BT":

                                    INDISPONIBLE +=1

                                    ptlyr.changeAttributeValue(featurept.id(), proprietairefield, 'PROPRIETAIRE PRIVE')

                                    ptlyr.changeAttributeValue(featurept.id(), gestionnairefield, 'PROPRIETAIRE PRIVE')

                                    ptlyr.changeAttributeValue(featurept.id(), modelefield, 'FAC')

                                    ptlyr.changeAttributeValue(featurept.id(), typestrucfield, 'ANCRAGE FACADE')

                                    ptlyr.changeAttributeValue(featurept.id(), emprisefield, 'OCCUPATION')

                                    

                                    ptlyr.changeAttributeValue(featurept.id(), profhautfield, '2.50')

                                    

                                    ptlyr.changeAttributeValue(featurept.id(), dateposefield, '19700101’')


                                if typeSupport == "POT_HTA":

                                    ptlyr.changeAttributeValue(featurept.id(), proprietairefield, 'HTA INTERDIT')

                                    ptlyr.changeAttributeValue(featurept.id(), gestionnairefield, 'HTA INTERDIT')

                                    ptlyr.changeAttributeValue(featurept.id(), modelefield, 'HTA INTERDIT')

                                    ptlyr.changeAttributeValue(featurept.id(), typestrucfield, 'HTA INTERDIT')

                                    ptlyr.changeAttributeValue(featurept.id(), emprisefield, 'HTA INTERDIT')

                                    ptlyr.changeAttributeValue(featurept.id(), etatfield, 'HTA INTERDIT')

                                    

                        for featuredbl in dbllyr.getFeatures():

                            if featuredbl.geometry().intersects(featurept.geometry()):

                                ptlyr.changeAttributeValue(featurept.id(), proprietairefield, 'MANCHE NUMERIQUE')

                                ptlyr.changeAttributeValue(featurept.id(), gestionnairefield, 'LA FIBRE 50')

                                ptlyr.changeAttributeValue(featurept.id(), modelefield, 'CMO')

                                ptlyr.changeAttributeValue(featurept.id(), typestrucfield, 'IMMEUBLE')

                                ptlyr.changeAttributeValue(featurept.id(), emprisefield, 'OCCUPATION')

                                ptlyr.changeAttributeValue(featurept.id(), idparentfield, featuredbl["REF_IMB"])

                    ptlyr.commitChanges()

                    ptlyr.startEditing()

                    

                    

                    parameters = { 'INPUT' : ptlyr, 

                                    'INTERSECT' : cablelyr, 

                                    'METHOD' : 0, 

                                    'PREDICATE' : [2] }



                    processing.run('qgis:selectbylocation', parameters )

                    if ptlyr.selectedFeatureCount() > 0:

                        for featurept in ptlyr.selectedFeatures():

                            ptlyr.changeAttributeValue(featurept.id(), commentfield, 'D3')

                            ptlyr.changeAttributeValue(featurept.id(), d3field, '1')

                        PTLogs = PTLogs + '\r     - ' + str(ptlyr.selectedFeatureCount())+' D3'

                    

                    modelenull = 0

                    potlbt = 0

                    pothta = 0

                    for featurept in ptlyr.getFeatures():

                        modele = featurept["MODELE"]

                        if modele == "MI" or modele == "MS" or modele == "MR" or modele == "MH" or modele == "MM" or modele == "MC" or modele == "M3"  or modele == "FR" or modele == "FS":

                            ptlyr.changeAttributeValue(featurept.id(), modelefield, 'PMET')

                        if modele == "BS" or modele == "BR" or modele == "19" or modele == "BH" or modele == "BM" or modele == "BP" or modele == "BC" or modele == "B3" or modele == "S" or modele == "JS" or modele == "HS" or modele == "CFZ":

                            ptlyr.changeAttributeValue(featurept.id(), modelefield, 'PBOI')

                        if modele == "A" or modele == "B" or modele == "D" or modele == "E" or modele == "K3":

                            ptlyr.changeAttributeValue(featurept.id(), modelefield, 'PBET')

                        if modele == "HTA INTERDIT":

                            pothta +=1

                        if modele == "POTL_BT INTERDIT":

                            potlbt +=1

                        if modele == NULL:

                            modelenull+=1

                            

                    if modelenull > 0:

                        PTLogs = PTLogs + '\r     - ' + str(modelenull)+' points techniques avec le champ modèle vide'

                    if pothta > 0:

                        PTLogs = PTLogs + '\r     - ' + str(pothta)+' points techniques HTA à vérifier'

                    if potlbt > 0:

                        PTLogs = PTLogs + '\r     - ' + str(potlbt)+' potelets BT à vérifier'

                            

                    if not PTLogs == '':

                        self.logslabel.moveCursor(QtGui.QTextCursor.End)

                        self.logslabel.insertPlainText(PTLogs+"\r\r\n")

                        PTLogs = ''

                        

                    

                    for featurecommune in commune.getFeatures():

                        communeID = featurecommune["insee"]

                        insee_field = utilisation_pt.fields().indexOf(str(communeID))

                        commune.select(featurecommune.id())

                        parameters = {'INPUT' : ptlyr,

                            'INTERSECT' : QgsProcessingFeatureSourceDefinition(commune.dataProvider().dataSourceUri(),selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),

                            'METHOD' : 0,

                            'PREDICATE' : [0] }

                        processing.run('qgis:selectbylocation', parameters)

                        for featurept in ptlyr.selectedFeatures():

                            if featurept.geometry().intersects(featurecommune.geometry()):

                                Max_PT = None

                                for combinaison in utilisation_pt.getFeatures():

                                    if combinaison[str(communeID)] == False and Max_PT == None:

                                        Max_PT = combinaison['incrementation']

                                        utilisation_pt.startEditing()

                                        utilisation_pt.changeAttributeValue(combinaison.id(), insee_field, True)

                                        if featurept["TYPE_STRUC"] == "APPUI":

                                            ptlyr.changeAttributeValue(featurept.id(), codefield, 'POT-'+communeID+'-3'+Max_PT)

                                        if featurept["TYPE_STRUC"] == "CHAMBRE":

                                            ptlyr.changeAttributeValue(featurept.id(), codefield, 'CHA-'+communeID+'-3'+Max_PT)

                                        if featurept["TYPE_STRUC"] == "IMMEUBLE":

                                            ptlyr.changeAttributeValue(featurept.id(), codefield, 'CMO-'+communeID+'-3'+Max_PT)

                                            ptlyr.changeAttributeValue(featurept.id(), nomfield, 'CMO-'+communeID+'-3'+Max_PT)

                                        if "ANCRAGE" in str(featurept["TYPE_STRUC"]) :

                                            ptlyr.changeAttributeValue(featurept.id(), codefield, 'FAC-'+communeID+'-3'+Max_PT)

                                            ptlyr.changeAttributeValue(featurept.id(), nomfield, 'FAC-'+communeID+'-3'+Max_PT)

                                        break

                                        



                    ptlyr.commitChanges()

        else : 

            QMessageBox.critical(self, "Information manquante", 'Le nom du SRO n\'est pas renseigné')

        self.labelinfo.setText("Création des points techniques terminée ...")

        

    def saveVar(self):

        global pluginpath

        global proprietaire

        global gestionnaire

        global FuSettings

        proprietaire = self.proprietaire.text()

        f = open(pluginpath+'\\memory\\proprietaire.siobuilder', 'wb')

        pickle.dump(proprietaire, f)

        f.close()

        gestionnaire = self.gestionnaire.text()

        f = open(pluginpath+'\\memory\\gestionnaire.siobuilder', 'wb')

        pickle.dump(gestionnaire, f)

        f.close()

        FuSettings = self.radioButton.isChecked()

        if FuSettings == True:

            FuSettings = 'FU'

        else: 

            FuSettings = 'FUHFUE'

        f = open(pluginpath+'\\memory\\FuSettings.siobuilder', 'wb')

        pickle.dump(FuSettings, f)

        f.close()

        QMessageBox.information(self, "Paramètres enregistrés", 'Ces paramètres sont enregistrés pour les prochaines utilisations')

        

        incrementationBTFile = self.fileLine.text()

        f = open(pluginpath+'\\memory\\incrementationBTFile.siobuilder', 'wb')

        pickle.dump(incrementationBTFile, f)

        f.close()

        

        incrementationBT = self.incrementationBT.value()

        f = open(incrementationBTFile, 'wb')

        pickle.dump(incrementationBT, f)

        f.close()

        

        incrementationPTFile = self.incrementationPTFile.text()

        f = open(pluginpath+'\\memory\\incrementationPTFile.siobuilder', 'wb')

        pickle.dump(incrementationPTFile, f)

        f.close()

        

        configPTFile = self.configPTFile.text()

        f = open(pluginpath+'\\memory\\configPTFile.siobuilder', 'wb')

        pickle.dump(configPTFile, f)

        f.close()

        

    def openIncrementationBT(self):

        global incrementationBT

        options = QFileDialog.Options()

        fileName, _ = QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*)", options=options)

        if fileName:

            self.fileLine.setText(fileName)

            f = open(fileName, 'rb')

            incrementationBT = pickle.load(f)

            self.incrementationBT.setValue(int(incrementationBT))

            f.close()



    def openIncrementationPT(self):

        global incrementationPTFile

        options = QFileDialog.Options()

        fileName, _ = QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*)", options=options)

        if fileName:

            self.incrementationPTFile.setText(fileName)

            incrementationPTFile = fileName

            

    def openConfigPT(self):

        global configPTFile

        options = QFileDialog.Options()

        fileName, _ = QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*)", options=options)

        if fileName:

            self.configPTFile.setText(fileName)

            configPTFile = fileName

            

    def remplissagePartiel(self):

        nomSRO = self.nomSRO.text()

        proprietaire = self.proprietaire.text()

        gestionnaire = self.gestionnaire.text()

        

        controlboite = 0

        controlzapbo = 0

        controlzacable = 0

        controlimb = 0



        for layer in QgsProject.instance().mapLayers().values():

            if 'BOITE_OPTIQUE' in layer.name():

                boitelyr = layer

                controlboite +=1

            if 'ZAPBO' in layer.name():

                zapbolyr = layer

                controlzapbo +=1

            if 'ZACABLE' in layer.name():

                zacablelyr = layer

                controlzacable +=1

            if 'DBL' in layer.name():

                imblyr = layer

                controlimb += 1



        if controlboite == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche BOITE_OPTIQUE n\'est pas présente')

        

        if controlzapbo == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche ZAPBO n\'est pas présente')

            

        if controlzacable == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche ZACABLE n\'est pas présente')

            

        if controlimb == 0:

            QMessageBox.critical(self, "Couche manquante", 'La couche DBL n\'est pas présente')

        self.labelinfo.setText("Remplissage partiel en cours ...")

        if QMessageBox.Ok == QMessageBox.question(self, "Remplissage partiel", "Le processus peut prendre plusieurs minutes. Voulez-vous continuer ?", QMessageBox.Ok|QMessageBox.Cancel):

            if not nomSRO == '':

                if not proprietaire == '':

                    if not gestionnaire == '':

                        if not controlboite == 0 and not controlzapbo == 0 and not controlzacable == 0 and not controlimb == 0:

                            partielLogs = ''

                            boitelyr.startEditing()

                            zapbolyr.startEditing()

                            zacablelyr.startEditing()



                            nomfield = zacablelyr.fields().indexOf('NOM')

                            etatzacfield = zacablelyr.fields().indexOf('etat')

                            nbprisezacfield = zacablelyr.fields().indexOf('NB_PRISES')

                            nomboitefield = boitelyr.fields().indexOf('NOM')

                            codeboitefield = boitelyr.fields().indexOf('CODE')

                            typefoncfield = boitelyr.fields().indexOf('TYPE_FONC')

                            etatfield = boitelyr.fields().indexOf('ETAT')

                            proprietairefield = boitelyr.fields().indexOf('PROPRIETAI')

                            gestionnairefield = boitelyr.fields().indexOf('GESTIONNAI')

                            emprisefield = boitelyr.fields().indexOf('EMPRISE')

                            amontfield = boitelyr.fields().indexOf('AMONT')

                            isolefield = boitelyr.fields().indexOf('ISOLE')

                            isolefield = boitelyr.fields().indexOf('ISOLE')

                            nbabonnesfield = boitelyr.fields().indexOf('NBABONNES')

                            fafsfield = boitelyr.fields().indexOf('FA_FS')

                            nbfutilefield = boitelyr.fields().indexOf('NBFUTILE')



                            i=0

                            for featurezacable in zacablelyr.getFeatures():

                                i+=1

                                zacablelyr.changeAttributeValue(featurezacable.id(), nomfield, i)

                                zacablelyr.changeAttributeValue(featurezacable.id(), etatfield, 'PROJET')

                                x=0

                                for featureboite in boitelyr.getFeatures():

                                    if featureboite.geometry().intersects(featurezacable.geometry()):

                                        x+=1

                                        fonction = str(featureboite["FONCTION"])

                                        if fonction == "PEC-PBO":

                                            fonction = "PBO"

                                        nomBoite = fonction+'-'+nomSRO+'-3'+str(i)+str(x).zfill(2)

                                        amontBoite = 'CDI-'+nomSRO+'-3'+str(i)+str(x).zfill(2)

                                        boitelyr.changeAttributeValue(featureboite.id(), nomboitefield, nomBoite)

                                        boitelyr.changeAttributeValue(featureboite.id(), codeboitefield, nomBoite)

                                        if fonction == "PEC-PBO" or fonction == "PBO" or fonction == "BET" or fonction == "PIA":

                                            typefonc = "POINT DE BRANCHEMENT OPTIQUE"

                                        if fonction == "PEC" or fonction == "BPE" or fonction == "PIA" or fonction == "BTI":

                                            typefonc = "BOITIER PROTECTION EPISSURE"

                                        boitelyr.changeAttributeValue(featureboite.id(), typefoncfield, typefonc)

                                        boitelyr.changeAttributeValue(featureboite.id(), etatfield, 'PROJET')

                                        boitelyr.changeAttributeValue(featureboite.id(), proprietairefield, proprietaire)

                                        boitelyr.changeAttributeValue(featureboite.id(), gestionnairefield, gestionnaire)

                                        boitelyr.changeAttributeValue(featureboite.id(), emprisefield, 'CONSTRUCTION')

                                        boitelyr.changeAttributeValue(featureboite.id(), amontfield, amontBoite)

                                        boitelyr.changeAttributeValue(featureboite.id(), isolefield, 0)

                                        

                                nb_priseZac = 0

                                for featureimb in imblyr.getFeatures():

                                    if featureimb.geometry().intersects(featurezacable.geometry()):

                                        nb_priseZac = nb_priseZac + int(featureimb["NB_PRISE"])

                                        

                                zacablelyr.changeAttributeValue(featurezacable.id(), nbprisezacfield, nb_priseZac)



                            nbprisezapbofield = zapbolyr.fields().indexOf('NB_PRISES')

                            fuzapbofield = zapbolyr.fields().indexOf('FU')

                            isolezapbofield = zapbolyr.fields().indexOf('ISOLE')

                            etatzapbofield = zapbolyr.fields().indexOf('ETAT')

                            nomzapbofield = zapbolyr.fields().indexOf('NOM')



                            for featurezapbo in zapbolyr.getFeatures():

                                nbprisezapbo = 0

                                NB_PR_GP = 0

                                NB_PR_TPE = 0

                                NB_PR_PRO = 0

                                NB_PR_PUB = 0

                                for featureimb in imblyr.getFeatures():

                                    if featureimb.geometry().intersects(featurezapbo.geometry()):

                                        NB_PR_GP = NB_PR_GP + int(featureimb["NB_PR_GP"])

                                        NB_PR_TPE = NB_PR_TPE + int(featureimb["NB_PR_TPE"])

                                        NB_PR_PRO = NB_PR_PRO + int(featureimb["NB_PR_PRO"])

                                        NB_PR_PUB = NB_PR_PUB + int(featureimb["NB_PR_PUB"])

                                nbprisezapbo = NB_PR_GP + NB_PR_TPE + NB_PR_PRO + NB_PR_PUB

                                nbprisecalcul = NB_PR_GP + NB_PR_TPE + (NB_PR_PRO*2) + (NB_PR_PUB*2)

                                zapbolyr.changeAttributeValue(featurezapbo.id(), nbprisezapbofield, nbprisezapbo)

                                fafs = ceil(nbprisecalcul*1.2)

                                fu = ceil(fafs/3)*3

                                zapbolyr.changeAttributeValue(featurezapbo.id(), fuzapbofield, fu)

                                zapbolyr.changeAttributeValue(featurezapbo.id(), isolezapbofield, 0)

                                zapbolyr.changeAttributeValue(featurezapbo.id(), etatzapbofield, 'PROJET')

                                zapbolyr.select(featurezapbo.id())

                                parameters = { 'INPUT' : boitelyr,

                                    'INTERSECT' : QgsProcessingFeatureSourceDefinition(zapbolyr.dataProvider().dataSourceUri(), selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),

                                    'METHOD' : 0, 

                                    'PREDICATE' : [0] }

                                processing.run('qgis:selectbylocation', parameters)

                                zapbolyr.removeSelection()

                                

                                if boitelyr.selectedFeatureCount() > 0:

                                    nbboiteabo = 0

                                    nbpbo = 0

                                    for featureboite in boitelyr.selectedFeatures():

                                        if featureboite["FONCTION"] == "PBO" or featureboite["FONCTION"] == "PEC-PBO" or featureboite["FONCTION"] == "BET" or featureboite["FONCTION"] == "PIA":

                                            nbboiteabo +=1

                                        if featureboite["FONCTION"] == "PBO" or featureboite["FONCTION"] == "PEC-PBO" or featureboite["FONCTION"] == "PIA":

                                            nbpbo +=1

                                

                                for featureboite in boitelyr.getFeatures():

                                    if featureboite.geometry().intersects(featurezapbo.geometry()):

                                        if nbboiteabo == 1 :

                                            boitelyr.changeAttributeValue(featureboite.id(), nbabonnesfield, nbprisezapbo)

                                            boitelyr.changeAttributeValue(featureboite.id(), fafsfield, fafs)

                                            boitelyr.changeAttributeValue(featureboite.id(), nbfutilefield, fu)

                                        if nbpbo == 1  and (str(featureboite['NOM'])[0:3]=="PBO" or str(featureboite['NOM'])[0:3]=="PIA"):

                                            zapbolyr.changeAttributeValue(featurezapbo.id(), nomzapbofield, featureboite['NOM'])

                                        if featureboite["FONCTION"] == "PEC":

                                            boitelyr.changeAttributeValue(featureboite.id(), nbabonnesfield, 0)

                                            boitelyr.changeAttributeValue(featureboite.id(), fafsfield, 0)

                                            boitelyr.changeAttributeValue(featureboite.id(), nbfutilefield, 0)

                                            

                            nbabonnesnull=0

                            for featureboite in boitelyr.getFeatures():

                                if featureboite["NBABONNES"] == NULL :

                                    nbabonnesnull +=1



                            nomzapbonull =0

                            for featurezapbo in zapbolyr.getFeatures():

                                if featurezapbo["NOM"] == NULL :

                                    nomzapbonull +=1

                                    

                            if nbabonnesnull >0 :

                                partielLogs = 'Remplissage partiel :\r     - Impossible de remplir le champ NBABONNES pour '+str(nbabonnesnull)+' boites\r\n'



                            if nomzapbonull >0 :

                                partielLogs = partielLogs + '     - Impossible de remplir le champ NOM pour '+str(nomzapbonull)+' ZAPBO\r\n'

                                

                            if not partielLogs == '':

                                self.logslabel.moveCursor(QtGui.QTextCursor.End)

                                self.logslabel.insertPlainText(partielLogs+"\r\r\n")

                                        

                            boitelyr.commitChanges()

                            zapbolyr.commitChanges()

                            zacablelyr.commitChanges()

                    else:

                        QMessageBox.critical(self, "Information manquante", 'Le gestionnaire n\'est pas renseigné')

                else:

                    QMessageBox.critical(self, "Information manquante", 'Le proprietaire n\'est pas renseigné')

            else:

                QMessageBox.critical(self, "Information manquante", 'Le nom du SRO n\'est pas renseigné')

        self.labelinfo.setText("Remplissage partiel terminé ...")



    def remplissageFinal(self):

        self.labelinfo.setText("Remplissage de table final en cours ...")

        if QMessageBox.Ok == QMessageBox.question(self, "Remplissage de table final", "Le processus peut prendre plusieurs minutes. Voulez-vous continuer ?", QMessageBox.Ok|QMessageBox.Cancel):

            controlboite = 0

            controlcable = 0

            controlpt = 0

            controlsupport = 0

            controlcommune = 0



            for layer in QgsProject.instance().mapLayers().values():

                if 'BOITE_OPTIQUE' in layer.name():

                    boitelyr = layer

                    controlboite += 1

                if 'CABLE_OPTIQUE' in layer.name():

                    cablelyr = layer

                    controlcable += 1

                if 'POINT_TECHNIQUE' in layer.name():

                    ptlyr = layer

                    controlpt += 1

                if 'SUPPORT_' in layer.name():

                    supportlyr = layer

                    controlsupport += 1

                if 'COMMUNE' in layer.name():

                    communelyr = layer

                    controlcommune += 1

                    

            if controlboite == 0:

                QMessageBox.critical(self, "Couche manquante", 'La couche BOITE_OPTIQUE n\'est pas présente')

            if controlcable == 0:

                QMessageBox.critical(self, "Couche manquante", 'La couche CABLE_OPTIQUE n\'est pas présente')

            if controlpt == 0:

                QMessageBox.critical(self, "Couche manquante", 'La couche POINT_TECHNIQUE n\'est pas présente')

            if controlsupport == 0:

                QMessageBox.critical(self, "Couche manquante", 'La couche SUPPORT n\'est pas présente')

            if controlcommune == 0:

                QMessageBox.critical(self, "Couche manquante", 'La couche COMMUNES n\'est pas présente')





            if not controlboite == 0 and not controlcable == 0 and not controlpt == 0 and not controlsupport == 0 and not controlcommune == 0:

                epissurefield = boitelyr.fields().indexOf('NBEPISSURE')

                intercoboitefield = boitelyr.fields().indexOf('INTERCO')

                idparentboitefield = boitelyr.fields().indexOf('ID_PARENT')

                supportboitefield = boitelyr.fields().indexOf('SUPPORT')

                typefoncfield = ptlyr.fields().indexOf('SUPPORT')

                boitelyr.startEditing()



                for cable1 in cablelyr.getFeatures():

                    checkorigine=0

                    checkpassage=0

                    FUcumul = 0

                    passageavere = 0

                    checkingBoite = cable1["EXTREMITE"]

                    section1 = cable1["SECTION"]

                    for cable2 in cablelyr.getFeatures():

                        origine = cable2["ORIGINE"]

                        section2 = cable2["SECTION"]

                        if checkingBoite == origine and not section1 == section2:

                            FUcumul = FUcumul + int(cable2["NB_FUTILE"])

                            checkpassage +=1

                        if checkingBoite == origine:

                            checkorigine +=1

                        if checkingBoite == origine and section1 == section2:

                            passageavere = 1

                    for featureboite in boitelyr.getFeatures():

                        nomboite = featureboite["NOM"]

                        if checkingBoite == nomboite:

                            boitelyr.changeAttributeValue(featureboite.id(), epissurefield, FUcumul)

                        if nomboite == checkingBoite and checkorigine == 0:

                            boitelyr.changeAttributeValue(featureboite.id(), intercoboitefield, "EXTREMITE")

                        if nomboite == checkingBoite and checkpassage == 0 and FUcumul == 0 and checkorigine == 1: 

                            boitelyr.changeAttributeValue(featureboite.id(), intercoboitefield, "FENETRAGE")

                        if nomboite == checkingBoite and passageavere == 1 and not FUcumul == 0:

                            boitelyr.changeAttributeValue(featureboite.id(), intercoboitefield, "PIQUAGE")

                        if nomboite == checkingBoite and passageavere == 0 and not FUcumul == 0:

                            boitelyr.changeAttributeValue(featureboite.id(), intercoboitefield, "RACCORD DROIT")



                for featureboite in boitelyr.getFeatures():

                    for featurept in ptlyr.getFeatures():

                        if featureboite.geometry().intersects(featurept.geometry()):

                            support = featurept["TYPE_STRUC"]

                            idparent = featurept["CODE"]

                            boitelyr.changeAttributeValue(featureboite.id(), supportboitefield, support)

                            boitelyr.changeAttributeValue(featureboite.id(), idparentboitefield, idparent)

                            

                            ptlyr.changeAttributeValue(featurept.id(), typefoncfield, 'RACCORDEMENT')



                cablelyr.startEditing() 

                typestrucfield = cablelyr.fields().indexOf('TYPE_STRUC')

                for featurecable in cablelyr.getFeatures():

                    intersectappui = 0

                    for featurept in ptlyr.getFeatures():

                        if featurecable.geometry().intersects(featurept.geometry()):

                            if featurept["TYPE_STRUC"] == "FACADE" or featurept["TYPE_STRUC"] == "APPUI":

                                intersectappui = 1

                        if intersectappui == 1:

                            cablelyr.changeAttributeValue(featurecable.id(), typestrucfield, "AERIEN")

                        else:

                            cablelyr.changeAttributeValue(featurecable.id(), typestrucfield, "CONDUITE")

                            

                for featurecable1 in cablelyr.getFeatures():

                    for featurecable2 in cablelyr.getFeatures():

                        if featurecable1["TYPE_STRUC"] == "AERIEN":

                            if featurecable1["SECTION"] == featurecable2["SECTION"]:

                                cablelyr.changeAttributeValue(featurecable2.id(), typestrucfield, "AERIEN")



                supportlyr.startEditing()

                inseefield = supportlyr.fields().indexOf('INSEE')

                for featuresupport in supportlyr.getFeatures():

                    for featurecommune in communelyr.getFeatures():

                        if featuresupport.geometry().intersects(featurecommune.geometry()):

                            insee = featurecommune["id"]

                            supportlyr.changeAttributeValue(featuresupport.id(), inseefield, insee)

                            

        self.labelinfo.setText("Remplissage de table final terminé ...")

        

    

    def streetViewintegrated(self):

        global streetviewint

        if streetviewint == 0:

            useTool()

            streetviewint = 1

            self.pushButton_10.setStyleSheet("color: green;")

        else :

            stopTool()

            streetviewint = 0

            self.pushButton_10.setStyleSheet("color: black;")

            

    def PTStreetView(self):

        global web

        for layer in QgsProject.instance().mapLayers().values():

                if 'POINT_TECHNIQUE' in layer.name():

                    ptlyr = layer

        PTName = self.mFeaturePickerWidget.feature()

        for featurept in ptlyr.getFeatures():

            if PTName["NOM"] == featurept["NOM"]:

                geom = PTName.geometry()

                sourceCrs = QgsCoordinateReferenceSystem(2154)

                destCrs = QgsCoordinateReferenceSystem(4326)

                tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())

                geom2 = QgsGeometry(geom)

                geom2.transform(tr)

                coord = geom2.asPoint()

                web.setWindowTitle(PTName["NOM"])

                web.show()

                web.load(QUrl('https://www.google.com/maps/@?api=1&map_action=pano&viewpoint='+str(coord.y())+','+str(coord.x())+'&heading=0&pitch=10&fov=250'))



    def BoiteStreetView(self):

        global web

        for layer in QgsProject.instance().mapLayers().values():

                if 'BOITE_OPTIQUE' in layer.name():

                    boitelyr = layer

        BoiteName = self.mFeaturePickerWidget_2.feature()



        for featureboite in boitelyr.getFeatures():

            if BoiteName["NOM"] == featureboite["NOM"]:

                geom = BoiteName.geometry()

                sourceCrs = QgsCoordinateReferenceSystem(2154)

                destCrs = QgsCoordinateReferenceSystem(4326)

                tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())

                geom2 = QgsGeometry(geom)

                geom2.transform(tr)

                coord = geom2.asPoint()

                web.setWindowTitle(BoiteName["NOM"])

                web.show()

                web.load(QUrl('https://www.google.com/maps/@?api=1&map_action=pano&viewpoint='+str(coord.y())+','+str(coord.x())+'&heading=0&pitch=10&fov=250'))



    def editprojet(self):

        root = QgsProject.instance().layerTreeRoot()

        treeview = iface.layerTreeView()

        boitelyr = None

        cablelyr = None

        ptlyr = None

        supportlyr = None

        sitelyr = None

        zacablelyr = None

        zasrolyr = None

        zanrolyr = None

        zapbolyr = None

        adductionlyr = None

        chambrelyr = None

        infralyr = None

        dbllyr = None

        supportpiq = None

        batimentlyr = None

        communeslyr = None

        parcelleslyr = None



        for layer in QgsProject.instance().mapLayers().values():

            if 'BOITE_OPTIQUE' in layer.name():

                boitelyr = layer

                

            if 'CABLE_OPTIQUE' in layer.name():

                cablelyr = layer

                

            if 'POINT_TECHNIQUE' in layer.name():

                ptlyr = layer

                

            if 'SUPPORT_' in layer.name():

                supportlyr = layer

                

            if 'SITE' in layer.name():

                sitelyr = layer

                

            if 'ZACABLE' in layer.name():

                zacablelyr = layer

                

            if 'ZASRO' in layer.name():

                zasrolyr = layer

                

            if 'ZANRO' in layer.name():

                zanrolyr = layer

                

            if 'ZAPBO' in layer.name():

                zapbolyr = layer

                

            if 'ADDUCTION' in layer.name():

                adductionlyr = layer

                

            if 'CHAMBRE' in layer.name():

                chambrelyr = layer

                

            if 'DBL' in layer.name():

                dbllyr = layer

                

            if 'INFRA' in layer.name():

                infralyr = layer

                

            if 'SUPPORT' in layer.name():

                lyrType = layer.geometryType()

                if lyrType == QgsWkbTypes.PointGeometry:

                    supportpiq = layer

            

            if 'BATIMENT' in layer.name():

                batimentlyr = layer

            

            if 'COMMUNE' in layer.name():

                communeslyr = layer

                

            if 'PARCELLE' in layer.name():

                parcelleslyr = layer





        livrablegroup = root.addGroup('LIVRABLE')

        if sitelyr is not None :

            livrablegroup.addLayer(sitelyr)

            root.removeLayer(sitelyr)

            

        if boitelyr is not None:

            livrablegroup.addLayer(boitelyr)

            root.removeLayer(boitelyr)

            

        if cablelyr is not None:

            livrablegroup.addLayer(cablelyr)

            root.removeLayer(cablelyr)

            

        if ptlyr is not None:

            livrablegroup.addLayer(ptlyr)

            root.removeLayer(ptlyr)

            

        if supportlyr is not None:

            livrablegroup.addLayer(supportlyr)

            root.removeLayer(supportlyr)

            

        if adductionlyr is not None:

            livrablegroup.addLayer(adductionlyr)

            root.removeLayer(adductionlyr)

            

        if zapbolyr is not None:

            livrablegroup.addLayer(zapbolyr)

            root.removeLayer(zapbolyr)

            

        if zacablelyr is not None:

            livrablegroup.addLayer(zacablelyr)

            root.removeLayer(zacablelyr)

            

        if zasrolyr is not None:

            livrablegroup.addLayer(zasrolyr)

            root.removeLayer(zasrolyr)

            

        if zanrolyr is not None:

            livrablegroup.addLayer(zanrolyr)

            root.removeLayer(zanrolyr)





        livrablegroup = root.addGroup('PIQUETAGE')

        if dbllyr is not None:

            livrablegroup.addLayer(dbllyr)

            root.removeLayer(dbllyr)



        if supportpiq is not None:

            livrablegroup.addLayer(supportpiq)

            root.removeLayer(supportpiq)

            

        if chambrelyr is not None:

            livrablegroup.addLayer(chambrelyr)

            root.removeLayer(chambrelyr)

            

        if infralyr is not None:

            livrablegroup.addLayer(infralyr)

            root.removeLayer(infralyr)



        livrablegroup = root.addGroup('FOND DE PLAN')

        if batimentlyr is not None:

            livrablegroup.addLayer(batimentlyr)

            root.removeLayer(batimentlyr)



        if communeslyr is not None:

            livrablegroup.addLayer(communeslyr)

            root.removeLayer(communeslyr)

            

        if parcelleslyr is not None:

            livrablegroup.addLayer(parcelleslyr)

            root.removeLayer(parcelleslyr)



        treeview.collapseAllNodes()